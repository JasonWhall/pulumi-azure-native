	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "100-blank-template"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for publicIPAddressResource: missing variable: publicIpAddressNameVar",
		"template": "101-1vm-2nics-2subnets-1vnet"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-AAD-DomainServices"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for deploymentResource2: missing parameter: vnetNameParam",
		"template": "101-DDoS-Attack-Prevention"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('scriptFile')[parameters('OS')].scriptFileName, parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "storageAccountResource",
		"sourceToken": "[equals(parameters('storageNewOrExisting'), 'new')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "publicIpAddressIdVar",
		"sourceToken": "[resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('scriptFile')[parameters('OS')].scriptFileName, parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[reference(resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2019-06-01').primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "virtualNetworkResource",
		"sourceToken": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[if(not(equals(parameters('publicIpNewOrExisting'), 'none')), variables('publicIpAddressId') , json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), parameters('subnetName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "sshcommandOut",
		"sourceToken": "[if(equals(parameters('publicIpNewOrExisting'), 'none'), 'no public ip', concat('ssh ', parameters('adminUsername'), '@', reference(resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2019-11-01').dnsSettings.fqdn))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "artifactsLocationParam",
		"sourceToken": "[deployment().properties.templateLink.uri]",
		"severity": "Med",
		"description": "NYI: 'deployment' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "publicIpDnsParam",
		"sourceToken": "[concat('linux-vm-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "publicIPAddressResource",
		"sourceToken": "[equals(parameters('publicIpNewOrExisting'), 'new')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "storageAccountNameParam",
		"sourceToken": "[concat('storage', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-Linux-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for deploymentResource1: missing variable: vnetNameVar",
		"template": "101-SQL-Injection-Attack-Prevention"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(variables('resourcePrefix'), uniquestring(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-Telegraf-InfluxDB-Grafana"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('_extensionScript'), parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-Telegraf-InfluxDB-Grafana"
	}
	{
		"sourceElement": "publicIPAddressResource",
		"sourceToken": "[concat(parameters('tigDnsPrefix'),uniquestring(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-Telegraf-InfluxDB-Grafana"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('_extensionScript'), parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-Telegraf-InfluxDB-Grafana"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2016-01-01').primaryEndpoints.blob)]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-Telegraf-InfluxDB-Grafana"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for deploymentResource: missing parameter: vnetNameParam",
		"template": "101-VM-Virus-Attack-Prevention"
	}
	{
		"sourceElement": "artifactsLocationParam",
		"sourceToken": "[deployment().properties.templateLink.uri]",
		"severity": "Med",
		"description": "NYI: 'deployment' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "virtualNetworkResource",
		"sourceToken": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "publicIpDnsParam",
		"sourceToken": "[concat('window-vm-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat(variables('scriptFileName'), parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "storageAccountNameParam",
		"sourceToken": "[concat('storage', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat(variables('scriptFileName'), parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[reference(resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2019-06-01').primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "publicIPAddressResource",
		"sourceToken": "[equals(parameters('publicIpNewOrExisting'), 'new')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "publicIpAddressIdVar",
		"sourceToken": "[resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "storageAccountResource",
		"sourceToken": "[equals(parameters('storageNewOrExisting'), 'new')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[if(not(equals(parameters('publicIpNewOrExisting'), 'none')), variables('publicIpAddressId') , json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), parameters('subnetName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-Windows-Java-ZuluOpenJDK"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for deploymentResource: missing variable: vnetNameVar",
		"template": "101-XSS-Attack-Prevention"
	}
	{
		"sourceElement": "containerGroupResource",
		"sourceToken": "[concat('c:\\run\\my=', uri(parameters('_artifactsLocation'), concat('scripts/SetupCertificate.zip', parameters('_artifactsLocationSasToken'))))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-aci-dynamicsnav"
	}
	{
		"sourceElement": "containerIPAddressFqdnOut",
		"sourceToken": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups/', parameters('contGroupName'))).ipAddress.fqdn]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-aci-dynamicsnav"
	}
	{
		"sourceElement": "artifactsLocationParam",
		"sourceToken": "[deployment().properties.templateLink.uri]",
		"severity": "Med",
		"description": "NYI: 'deployment' not supported as yet",
		"template": "101-aci-dynamicsnav"
	}
	{
		"sourceElement": "containerIPv4AddressOut",
		"sourceToken": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups/', parameters('name'))).ipAddress.ip]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-aci-linuxcontainer-public-ip"
	}
	{
		"sourceElement": "storageAccountNameParam",
		"sourceToken": "[uniquestring(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-aci-storage-file-share"
	}
	{
		"sourceElement": "containerGroupResource",
		"sourceToken": "[listKeys(parameters('storageAccountName'),'2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-aci-storage-file-share"
	}
	{
		"sourceElement": "containerIPv4AddressOut",
		"sourceToken": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups/', parameters('containerGroupName'))).ipAddress.ip]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-aci-vnet"
	}
	{
		"sourceElement": "sshMaster0Out",
		"sourceToken": "[concat('ssh ', variables('adminUsername'), '@', reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).masterProfile.fqdn, ' -A -p 2200')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-acs-dcos"
	}
	{
		"sourceElement": "agentFQDNOut",
		"sourceToken": "[reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).agentPoolProfiles[0].fqdn]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-acs-dcos"
	}
	{
		"sourceElement": "masterFQDNOut",
		"sourceToken": "[reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).masterProfile.fqdn]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-acs-dcos"
	}
	{
		"sourceElement": "agentFQDNOut",
		"sourceToken": "[reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).agentPoolProfiles[0].fqdn]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-acs-kubernetes"
	}
	{
		"sourceElement": "sshMaster0Out",
		"sourceToken": "[concat('ssh ', parameters('adminUsername'), '@', reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).masterProfile.fqdn, ' -A -p 22')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-acs-kubernetes"
	}
	{
		"sourceElement": "masterFQDNOut",
		"sourceToken": "[reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).masterProfile.fqdn]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-acs-kubernetes"
	}
	{
		"sourceElement": "agentFQDNOut",
		"sourceToken": "[reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).agentPoolProfiles[0].fqdn]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-acs-swarm"
	}
	{
		"sourceElement": "masterFQDNOut",
		"sourceToken": "[reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).masterProfile.fqdn]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-acs-swarm"
	}
	{
		"sourceElement": "sshMaster0Out",
		"sourceToken": "[concat('ssh ', variables('adminUsername'), '@', reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).masterProfile.fqdn, ' -A -p 2200')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-acs-swarm"
	}
	{
		"sourceElement": "masterDiskTypeVar",
		"sourceToken": "[if(contains(variables('masterVmSizeSuffix'), 's'), 'Premium_LRS', 'StandardSSD_LRS')]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "virtualMachineScaleSetResource",
		"sourceToken": "[base64(concat('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        H4sIACkUqlkAA81ZbXPbNhL+zl+xpTW1nYaipDSXOWeUG8dWLp6rLY9kd24uaWOIhCzWFKEQoGSfq/9+u3ihSFmK3TaZOWUSkuAC++wunt0Fs/NdOEqycMTkxPN2/vzP24EjkY2T6yLnMFywfAqnIubQzzi8FbceCVxMEglJJhVLUwlqwmEs0lQskuwaIjGdiYxnSqJgAMciuuF55RZXRwHJ9VBl/SmTiudyfZhdm6X+gkGe5AqCW8/j0USAj6hzRUgrWqK0IO0I3ljOVCIy34uZ4t5MAsPJx/2jf/UGn476p+f9Ye/Tz73B8KR/1vXbzXan2fLrCNGKc5azKTcm1eGcHg4veoOj/uXZRbdx317agfNB793Jv3Gk40benQyGF4fHxwMcfLH0Dv9zOehdDnv0+OPSQxgXJ2co8NNPw6PByfnF5eAE37xcem8Ph73h5duzHq3/t6X38+nZ4WmvezURUmUI6opGLk/f4kpX2icNIwG/g+Qx7Mqw+ezDr63g77983PugLz983H/WCD+2w12aa5Fumftxr5y9/8xOd3NtCE51rHEnFJk6gEbFIX5d4jzn4+S2FDGK12TeJblUcBjHeSlXOs6Jzqdk94ED64adG8wLffscnH16sK5x5Vh8uXpwr8sA4dvy3t/IRs2y6VRk8K7IItptG/c4OiyTSMTD/+I/Z1wtRH6zt+/dewA7YF5p+mXmFdA/El/a5/ecpWpy123j0FjkkCBp4b7dxC27fA2xwGGAxTXRox/GfB5mRZrCRKnZQUjZ5LqJbNZCyRg+QOMfEPDP0IJf9BgqzvQNgXF7CyZMwojzDBUWWUyMQrIV3AquAWvZYeO/qiWYYCZGyLcyo5yzG30/TvRFppzPoE1rxJhxPIeyrgMCTFwGcgl4o7pMKKfyObCRMEnCZjnfesEkCPMwA2ZWu00UdDyLqxYX8goJRiyDnEuRzvmTotNahad0bJD8v0fiWwQCPUfP1nna6ch0LuWfj9FyA6m8932baq8qDseElUhTmMDSTlvm1/MRdLs4VCaLuok5V0WeAfmXp5JXx9oODy5a6nntpjrfaI9gjcIrs1XS93AaQtPFcQXs4Ro1VevqWzX1eq0va89MNTbajQdaJ+faa37jfpUPl437tTy83JwFTSJ0sZU8HRMFjs+G24Rtom24aJUJncpPEQtQHOPGIOQqCimQ8qFe1HhiNkzZnGxRY8VoizFDIN0c0LOZiVbZvWeebSjqZG6tp9pA5QmX8CPeYSTyuwAXzrDQFVRAg2DBEqXHu+2XEHzuBzohS8zIOLsZa0WUl8nkyVdNCcZq26ZZwxCSLKIICTfG2vD0ZLz0VIIKa+7BToxihHbmU4Gmsn+CMadSLp3vL2fYfK08DTHjVC3FTNdKdHxBAty8PdYv++adDQKYDTG9iZMcgpnZEvIO+TGN7TW0zkQ88yTizdgz7hpSh+gUU+TTBMVReQYHnRevXsJeJoAVavIcRoWiQM8xfe2TqF2BpVKgsylhKcBCGoMSuiAUWXILklZWwBSEc5aHeZGVSPCywk69PAQR7BqXfBganCbAvVseaaDdtcewkLk+Cpg10c/vQUVU0VtN/cfYgKMEBoe3gPDhzZOcFoo5z/Mk5k0iyK6L/Nb4bGBX/WTg10llR8u2R7sGi+G3JFqiJsWISGatDSMDIsx5ypnkEscXWSpYHDY2HwzsxMBODK4KU1PkVXk7vSIPU7RSEbG0EjM36xuwu67gW7Dcne+iCZH8h9tHTDQ5weytSKWW6Bgw8q59abaaSxZYL2iju964lnor3RfSy05YdTAaN41t7b1erDaR1u2WyMbiq0ajDqO1MQM/aLyqiPBYGrA/2hrXtG5vyFYAKr2YX++eXErfXKm3/bD4RuXXhSTD7JgXKXLUxhSoKs9yQTuR/9FTv7e5jyp7Ntc0YL9WdnC2f8Ge7XU1jCtXHKFrdR1i2KIu7DcDLARjfep07dhqlo2O1HLawCBgMWZIlWAWoN4VGnuVFnOfsvErFDI1ZquEiY7r4Fb4hhz9GbP8zmLBqoJEmmnIWHN+E7ivsXHD/leuPnqsAGucyFOuxA3Puv62N4fR5yLJeawJY37bjyxbFm/sWedg6am731Qk4zNCHOgJmJPRqAx7zny/tu4aBx9E7osGtB4IrthTmpbU7dBselmOWUpVwWxWVmGY+T0AuiWIkSjSONtVRJaMR4pCqSO37dRTrufOOQ8MqW1MvS0C6+Y18Bti88rlFn3s2H5Yec/mhExi22JbJsQ9Q7zQwR9gQlxwJDheOx3CbbN7DLjNwZfhr+dGthHaG+/cTQ7bvu1G5IT+xp/sMe8RSEOuDH3nLEnZKEkTdQdi7BxNZ5sD2LXHiF2NlxXUg5Qe08cf080Ql6vraFF3BlkhWTtKOSiHevjp/NzMzS/y8suc/Ap8pLNylY6PU/FJNKxTsLJrq9QrafdkytXAVINQ8kv7/1FmVVhlsf01NtmdgkZs+ogL32F9inEbjbAvo68JtQ3tGk8E+lwfTm6S6IZQi/EYuUbfm+zpVkZ5MlNkRfk/A3Sa8GvNcaf15O54M9jfkSCTYlbR8eaNOdek4jpk9I0ltJ/Xg5EQSqqczQICanE2UQ46b75vw/fmy4Kxs+wC6JzE0U4krbPIfJLXX+eNMDWTKVcI/PGP+naK6zhM50lcdH5j2R32I1OG1ZuSmRgrXJNOJRu4LSeFoohAQIli4dkKvQPkPmjDFFs+zBu4utNnEs+DoFQXcp74H9DolC7TGQAA\n    path: /opt/azure/containers/configure-swarmmode-cluster.sh\n    permissions: \"0744\"\n\n',variables('agentRunCmdFile'),variables('agentRunCmd')))]",
		"severity": "Med",
		"description": "NYI: 'base64' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "inboundNatRuleResource",
		"sourceToken": "[copyIndex(2200)]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "inboundNatRuleResource",
		"sourceToken": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/configuremaster')]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('masterVMNamePrefix'), copyIndex()))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "masterFQDNOut",
		"sourceToken": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[variables('masterLbInboundNatRules')[copyIndex()]]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[concat(variables('masterFirstAddrPrefix'), copyIndex(int(variables('masterFirstAddrOctet4'))))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules', variables('masterLbName'), concat('SSH-',variables('masterVMNamePrefix'), copyIndex()))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "masterFirstAddrOctetsVar",
		"sourceToken": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
		"severity": "Med",
		"description": "NYI: 'split' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "loadBalancerResource",
		"sourceToken": "[resourceID('Microsoft.Network/publicIPAddresses', variables('agentIPAddressName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceID' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "masterEndpointDNSNamePrefixVar",
		"sourceToken": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
		"severity": "Med",
		"description": "NYI: 'tolower' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "agentEndpointDNSNamePrefixVar",
		"sourceToken": "[tolower(parameters('agentEndpointDNSNamePrefix'))]",
		"severity": "Med",
		"description": "NYI: 'tolower' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "agentFQDNOut",
		"sourceToken": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('agentIPAddressName'))).dnsSettings.fqdn]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "locationVar",
		"sourceToken": "[variables('locations')[mod(add(2,length(parameters('location'))),add(1,length(parameters('location'))))]]",
		"severity": "Med",
		"description": "NYI: 'mod' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "agentVmSizeSuffixVar",
		"sourceToken": "[toLower(split(parameters('agentVMSize'), '_')[1])]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "masterVmSizeSuffixVar",
		"sourceToken": "[toLower(split(parameters('masterVMSize'), '_')[1])]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "agentDiskTypeVar",
		"sourceToken": "[if(contains(variables('agentVmSizeSuffix'), 's'), 'Premium_LRS', 'StandardSSD_LRS')]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat('acsengine-', variables('masterVMNamePrefix'), copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat(variables('masterVMNamePrefix'), copyIndex(),'_OSDisk')]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[base64('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        H4sIACkUqlkAA81ZbXPbNhL+zl+xpTW1nYaipDSXOWeUG8dWLp6rLY9kd24uaWOIhCzWFKEQoGSfq/9+u3ihSFmK3TaZOWUSkuAC++wunt0Fs/NdOEqycMTkxPN2/vzP24EjkY2T6yLnMFywfAqnIubQzzi8FbceCVxMEglJJhVLUwlqwmEs0lQskuwaIjGdiYxnSqJgAMciuuF55RZXRwHJ9VBl/SmTiudyfZhdm6X+gkGe5AqCW8/j0USAj6hzRUgrWqK0IO0I3ljOVCIy34uZ4t5MAsPJx/2jf/UGn476p+f9Ye/Tz73B8KR/1vXbzXan2fLrCNGKc5azKTcm1eGcHg4veoOj/uXZRbdx317agfNB793Jv3Gk40benQyGF4fHxwMcfLH0Dv9zOehdDnv0+OPSQxgXJ2co8NNPw6PByfnF5eAE37xcem8Ph73h5duzHq3/t6X38+nZ4WmvezURUmUI6opGLk/f4kpX2icNIwG/g+Qx7Mqw+ezDr63g77983PugLz983H/WCD+2w12aa5Fumftxr5y9/8xOd3NtCE51rHEnFJk6gEbFIX5d4jzn4+S2FDGK12TeJblUcBjHeSlXOs6Jzqdk94ED64adG8wLffscnH16sK5x5Vh8uXpwr8sA4dvy3t/IRs2y6VRk8K7IItptG/c4OiyTSMTD/+I/Z1wtRH6zt+/dewA7YF5p+mXmFdA/El/a5/ecpWpy123j0FjkkCBp4b7dxC27fA2xwGGAxTXRox/GfB5mRZrCRKnZQUjZ5LqJbNZCyRg+QOMfEPDP0IJf9BgqzvQNgXF7CyZMwojzDBUWWUyMQrIV3AquAWvZYeO/qiWYYCZGyLcyo5yzG30/TvRFppzPoE1rxJhxPIeyrgMCTFwGcgl4o7pMKKfyObCRMEnCZjnfesEkCPMwA2ZWu00UdDyLqxYX8goJRiyDnEuRzvmTotNahad0bJD8v0fiWwQCPUfP1nna6ch0LuWfj9FyA6m8932baq8qDseElUhTmMDSTlvm1/MRdLs4VCaLuok5V0WeAfmXp5JXx9oODy5a6nntpjrfaI9gjcIrs1XS93AaQtPFcQXs4Ro1VevqWzX1eq0va89MNTbajQdaJ+faa37jfpUPl437tTy83JwFTSJ0sZU8HRMFjs+G24Rtom24aJUJncpPEQtQHOPGIOQqCimQ8qFe1HhiNkzZnGxRY8VoizFDIN0c0LOZiVbZvWeebSjqZG6tp9pA5QmX8CPeYSTyuwAXzrDQFVRAg2DBEqXHu+2XEHzuBzohS8zIOLsZa0WUl8nkyVdNCcZq26ZZwxCSLKIICTfG2vD0ZLz0VIIKa+7BToxihHbmU4Gmsn+CMadSLp3vL2fYfK08DTHjVC3FTNdKdHxBAty8PdYv++adDQKYDTG9iZMcgpnZEvIO+TGN7TW0zkQ88yTizdgz7hpSh+gUU+TTBMVReQYHnRevXsJeJoAVavIcRoWiQM8xfe2TqF2BpVKgsylhKcBCGoMSuiAUWXILklZWwBSEc5aHeZGVSPCywk69PAQR7BqXfBganCbAvVseaaDdtcewkLk+Cpg10c/vQUVU0VtN/cfYgKMEBoe3gPDhzZOcFoo5z/Mk5k0iyK6L/Nb4bGBX/WTg10llR8u2R7sGi+G3JFqiJsWISGatDSMDIsx5ypnkEscXWSpYHDY2HwzsxMBODK4KU1PkVXk7vSIPU7RSEbG0EjM36xuwu67gW7Dcne+iCZH8h9tHTDQ5weytSKWW6Bgw8q59abaaSxZYL2iju964lnor3RfSy05YdTAaN41t7b1erDaR1u2WyMbiq0ajDqO1MQM/aLyqiPBYGrA/2hrXtG5vyFYAKr2YX++eXErfXKm3/bD4RuXXhSTD7JgXKXLUxhSoKs9yQTuR/9FTv7e5jyp7Ntc0YL9WdnC2f8Ge7XU1jCtXHKFrdR1i2KIu7DcDLARjfep07dhqlo2O1HLawCBgMWZIlWAWoN4VGnuVFnOfsvErFDI1ZquEiY7r4Fb4hhz9GbP8zmLBqoJEmmnIWHN+E7ivsXHD/leuPnqsAGucyFOuxA3Puv62N4fR5yLJeawJY37bjyxbFm/sWedg6am731Qk4zNCHOgJmJPRqAx7zny/tu4aBx9E7osGtB4IrthTmpbU7dBselmOWUpVwWxWVmGY+T0AuiWIkSjSONtVRJaMR4pCqSO37dRTrufOOQ8MqW1MvS0C6+Y18Bti88rlFn3s2H5Yec/mhExi22JbJsQ9Q7zQwR9gQlxwJDheOx3CbbN7DLjNwZfhr+dGthHaG+/cTQ7bvu1G5IT+xp/sMe8RSEOuDH3nLEnZKEkTdQdi7BxNZ5sD2LXHiF2NlxXUg5Qe08cf080Ql6vraFF3BlkhWTtKOSiHevjp/NzMzS/y8suc/Ap8pLNylY6PU/FJNKxTsLJrq9QrafdkytXAVINQ8kv7/1FmVVhlsf01NtmdgkZs+ogL32F9inEbjbAvo68JtQ3tGk8E+lwfTm6S6IZQi/EYuUbfm+zpVkZ5MlNkRfk/A3Sa8GvNcaf15O54M9jfkSCTYlbR8eaNOdek4jpk9I0ltJ/Xg5EQSqqczQICanE2UQ46b75vw/fmy4Kxs+wC6JzE0U4krbPIfJLXX+eNMDWTKVcI/PGP+naK6zhM50lcdH5j2R32I1OG1ZuSmRgrXJNOJRu4LSeFoohAQIli4dkKvQPkPmjDFFs+zBu4utNnEs+DoFQXcp74H9DolC7TGQAA\n    path: /opt/azure/containers/configure-swarmmode-cluster.sh\n    permissions: \"0744\"\n\n')]",
		"severity": "Med",
		"description": "NYI: 'base64' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-acsengine-swarmmode"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-aks"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for managedClusterResource: missing variable: vnetSubnetIDVar",
		"template": "101-aks-advanced-networking"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for managedClusterResource: missing variable: vnetSubnetIDVar",
		"template": "101-aks-advanced-networking-aad"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-aks-azml-targetcompute"
	}
	{
		"sourceElement": "controlPlaneFQDNOut",
		"sourceToken": "[reference(resourceId('Microsoft.ContainerService/managedClusters/', parameters('aksClusterName'))).fqdn]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-aks-vmss-systemassigned-identity"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-analysis-services-create"
	}
	{
		"sourceElement": "netAppAccountNameParam",
		"sourceToken": "[concat('anfacc', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-anf-nfs-volume"
	}
	{
		"sourceElement": "virtualNetworkNameParam",
		"sourceToken": "[concat('anfvnet', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-anf-nfs-volume"
	}
	{
		"sourceElement": "subnetNameParam",
		"sourceToken": "[concat('anfsubnet', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-anf-nfs-volume"
	}
	{
		"sourceElement": "netAppPoolNameParam",
		"sourceToken": "[concat('pool', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-anf-nfs-volume"
	}
	{
		"sourceElement": "netAppVolumeNameParam",
		"sourceToken": "[concat('volume', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-anf-nfs-volume"
	}
	{
		"sourceElement": "volumeResource",
		"sourceToken": "[if(equals( parameters('protocolTypes'), 'NFSv3'),bool('true'),bool('false'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-anf-nfs-volume"
	}
	{
		"sourceElement": "volumeResource",
		"sourceToken": "[if(equals(parameters('protocolTypes'), 'NFSv4.1'),bool('true'),bool('false'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-anf-nfs-volume"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for capacityPoolResource: missing parameter: netAppAccountNameParam",
		"template": "101-anf-smb-volume"
	}
	{
		"sourceElement": "apiManagementServiceNameVar",
		"sourceToken": "[concat('apiservice', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-api-management-create-with-msi"
	}
	{
		"sourceElement": "apiManagementServiceNameVar",
		"sourceToken": "[concat('apim-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-api-management-key-vault-create"
	}
	{
		"sourceElement": "identityNameVar",
		"sourceToken": "[concat('id-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-api-management-key-vault-create"
	}
	{
		"sourceElement": "keyVaultNameParam",
		"sourceToken": "[concat('kv-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-api-management-key-vault-create"
	}
	{
		"sourceElement": "secretResource",
		"sourceToken": "[length(parameters('Secrets'))]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-api-management-key-vault-create"
	}
	{
		"sourceElement": "secretResource",
		"sourceToken": "[parameters('Secrets')[copyIndex()].value]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-api-management-key-vault-create"
	}
	{
		"sourceElement": "secretResource",
		"sourceToken": "[concat(parameters('keyVaultName'), '/', parameters('Secrets')[copyIndex()].name)]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-api-management-key-vault-create"
	}
	{
		"sourceElement": "vaultResource",
		"sourceToken": "[reference(variables('identityID')).tenantId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-api-management-key-vault-create"
	}
	{
		"sourceElement": "vaultResource",
		"sourceToken": "[reference(variables('identityID')).principalId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-api-management-key-vault-create"
	}
	{
		"sourceElement": "serviceResource",
		"sourceToken": "[reference(variables('identityID')).clientId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-api-management-key-vault-create"
	}
	{
		"sourceElement": "apiManagementServiceNameVar",
		"sourceToken": "[concat('apiservice', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-api-management-simple-zones"
	}
	{
		"sourceElement": "appConfigRefVar",
		"sourceToken": "[resourceId(parameters('appConfigStoreResourceGroup'), 'Microsoft.AppConfiguration/configurationStores', parameters('appConfigStoreName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-app-configuration"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[listKeyValue(variables('appConfigRef'), '2019-10-01', variables('windowsOSVersionParameters')).value]",
		"severity": "Med",
		"description": "NYI: 'listKeyValue' not supported as yet",
		"template": "101-app-configuration"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[listKeyValue(variables('appConfigRef'), '2019-10-01', variables('diskSizeGBParameters')).value]",
		"severity": "Med",
		"description": "NYI: 'listKeyValue' not supported as yet",
		"template": "101-app-configuration"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))).primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-app-configuration"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-app-configuration-store"
	}
	{
		"sourceElement": "configurationStoreResource",
		"sourceToken": "[string(variables('featureFlagValue'))]",
		"severity": "Med",
		"description": "NYI: 'string' not supported as yet",
		"template": "101-app-configuration-store-ff"
	}
	{
		"sourceElement": "keyValueResource",
		"sourceToken": "[string(variables('featureFlagValue'))]",
		"severity": "Med",
		"description": "NYI: 'string' not supported as yet",
		"template": "101-app-configuration-store-ff"
	}
	{
		"sourceElement": "configStoreNameParam",
		"sourceToken": "[concat('appconfig',uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-app-configuration-store-ff"
	}
	{
		"sourceElement": "configurationStoreResource",
		"sourceToken": "[string(variables('keyVaultRef'))]",
		"severity": "Med",
		"description": "NYI: 'string' not supported as yet",
		"template": "101-app-configuration-store-keyvaultref"
	}
	{
		"sourceElement": "keyValueResource",
		"sourceToken": "[string(variables('keyVaultRef'))]",
		"severity": "Med",
		"description": "NYI: 'string' not supported as yet",
		"template": "101-app-configuration-store-keyvaultref"
	}
	{
		"sourceElement": "configStoreNameParam",
		"sourceToken": "[concat('appconfig',uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-app-configuration-store-keyvaultref"
	}
	{
		"sourceElement": "keyValueResource",
		"sourceToken": "[concat(parameters('configStoreName'), '/', parameters('keyValueNames')[copyIndex()])]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-app-configuration-store-kv"
	}
	{
		"sourceElement": "keyValueResource",
		"sourceToken": "[length(parameters('keyValueNames'))]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-app-configuration-store-kv"
	}
	{
		"sourceElement": "keyValueResource",
		"sourceToken": "[parameters('keyValueValues')[copyIndex()]]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-app-configuration-store-kv"
	}
	{
		"sourceElement": "referencekeyvalueobjectOut",
		"sourceToken": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores/keyValues', parameters('configStoreName'), parameters('keyValueNames')[1]), '2020-07-01-preview')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-app-configuration-store-kv"
	}
	{
		"sourceElement": "referencekeyvaluevalueOut",
		"sourceToken": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores/keyValues', parameters('configStoreName'), parameters('keyValueNames')[0]), '2020-07-01-preview').value]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-app-configuration-store-kv"
	}
	{
		"sourceElement": "keyValueResource",
		"sourceToken": "[concat(parameters('configStoreName'), '/', if(contains(parameters('keyData')[copyIndex()], 'label'), format('{0}${1}', parameters('keyData')[copyIndex()].key, parameters('keyData')[copyIndex()].label), parameters('keyData')[copyIndex()].key)) ]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-app-configuration-store-kv-copy"
	}
	{
		"sourceElement": "keyValueResource",
		"sourceToken": "[length(parameters('keyData'))]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-app-configuration-store-kv-copy"
	}
	{
		"sourceElement": "keyValueResource",
		"sourceToken": "[parameters('keyData')[copyIndex()].value]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-app-configuration-store-kv-copy"
	}
	{
		"sourceElement": "keyValueResource",
		"sourceToken": "[if(contains(parameters('keyData')[copyIndex()], 'contentType'), parameters('keyData')[copyIndex()].contentType, json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-app-configuration-store-kv-copy"
	}
	{
		"sourceElement": "keyValueResource",
		"sourceToken": "[if(contains(parameters('keyData')[copyIndex()], 'tag'), parameters('keyData')[copyIndex()].tag, json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-app-configuration-store-kv-copy"
	}
	{
		"sourceElement": "referencekeyvaluevalueOut",
		"sourceToken": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores/keyValues', parameters('configStoreName'), parameters('keyData')[0].key), '2020-07-01-preview').value]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-app-configuration-store-kv-copy"
	}
	{
		"sourceElement": "referencekeyvalueobjectOut",
		"sourceToken": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores/keyValues', parameters('configStoreName'), parameters('keyData')[0].key), '2020-07-01-preview')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-app-configuration-store-kv-copy"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2019-06-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-app-function"
	}
	{
		"sourceElement": "siteNameParam",
		"sourceToken": "[concat('FuncApp-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-app-function"
	}
	{
		"sourceElement": "storageAccountNameParam",
		"sourceToken": "[concat('store', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-app-function"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[reference(resourceId('Microsoft.CertificateRegistration/certificateOrders', parameters('certificateOrderName'))).SignedCertificate.Thumbprint]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-app-service-certificate-standard"
	}
	{
		"sourceElement": "domainOwnershipIdentifierResource",
		"sourceToken": "[reference(resourceId('Microsoft.CertificateRegistration/certificateOrders', parameters('certificateOrderName'))).DomainVerificationToken]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-app-service-certificate-standard"
	}
	{
		"sourceElement": "domainOwnershipIdentifierResource",
		"sourceToken": "[reference(resourceId('Microsoft.CertificateRegistration/certificateOrders', parameters('certificateOrderName'))).DomainVerificationToken]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-app-service-certificate-wildcard"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[reference(resourceId('Microsoft.CertificateRegistration/certificateOrders', parameters('certificateOrderName'))).SignedCertificate.Thumbprint]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-app-service-certificate-wildcard"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[contains(parameters('repoUrl'),'http')]",
		"severity": "Med",
		"description": "NYI: 'contains' not supported as yet",
		"template": "101-app-service-docs-linux"
	}
	{
		"sourceElement": "webAppNameParam",
		"sourceToken": "[concat('webApp-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-app-service-docs-linux"
	}
	{
		"sourceElement": "gitRepoUrlVar",
		"sourceToken": "[if(bool(parameters('helloWorld')), variables('gitRepoReference')[toLower(parameters('language'))], parameters('repoUrl'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-app-service-docs-windows"
	}
	{
		"sourceElement": "webAppNameParam",
		"sourceToken": "[concat('webApp-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-app-service-docs-windows"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[contains(variables('gitRepoUrl'),'http')]",
		"severity": "Med",
		"description": "NYI: 'contains' not supported as yet",
		"template": "101-app-service-docs-windows"
	}
	{
		"sourceElement": "sourcecontrolResource",
		"sourceToken": "[contains(variables('gitRepoUrl'),'http')]",
		"severity": "Med",
		"description": "NYI: 'contains' not supported as yet",
		"template": "101-app-service-docs-windows"
	}
	{
		"sourceElement": "sourcecontrolResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/sourcecontrols' and version '2020-06-01'",
		"template": "101-app-service-docs-windows"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2019-08-01'",
		"template": "101-app-service-regional-vnet-integration"
	}
	{
		"sourceElement": "appServicePlanNameParam",
		"sourceToken": "[uniqueString(subscription().subscriptionId)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-app-service-regional-vnet-integration"
	}
	{
		"sourceElement": "appNameParam",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-app-service-regional-vnet-integration"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-application-gateway-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for publicIPAddressResource: missing variable: publicIPAddressNameVar",
		"template": "101-application-gateway-key-vault-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-application-gateway-public-ip"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-application-gateway-public-ip-ssl-offload"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-application-gateway-redirect"
	}
	{
		"sourceElement": "publicIPAddressResource",
		"sourceToken": "[concat('appgw-vm-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-application-gateway-rewrite"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-application-gateway-v2-autoscale-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for applicationGatewayResource: missing parameter: applicationGateWayCapacityParam",
		"template": "101-application-gateway-waf"
	}
	{
		"sourceElement": "automationAccountResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/AzureAutomationTutorial.graphrunbook', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-automation"
	}
	{
		"sourceElement": "automationAccountResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/AzureAutomationTutorial.ps1', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-automation"
	}
	{
		"sourceElement": "automationAccountResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/AzureAutomationTutorialPython2.py', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-automation"
	}
	{
		"sourceElement": "runbookResource1",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/AzureAutomationTutorialPython2.py', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-automation"
	}
	{
		"sourceElement": "runbookResource0",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/AzureAutomationTutorial.ps1', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-automation"
	}
	{
		"sourceElement": "runbookResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/AzureAutomationTutorial.graphrunbook', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-automation"
	}
	{
		"sourceElement": "artifactsLocationParam",
		"sourceToken": "[deployment().properties.templateLink.uri]",
		"severity": "Med",
		"description": "NYI: 'deployment' not supported as yet",
		"template": "101-automation-configuration"
	}
	{
		"sourceElement": "provisionConfigurationURLVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nested/provisionConfiguration.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-automation-configuration"
	}
	{
		"sourceElement": "provisionNetworkURLVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nested/provisionNetwork.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-automation-configuration"
	}
	{
		"sourceElement": "provisionDNSUrlVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nested/provisionDNS.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-automation-configuration"
	}
	{
		"sourceElement": "provisionServerUrlVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nested/provisionServer.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-automation-configuration"
	}
	{
		"sourceElement": "compileNameParam",
		"sourceToken": "[guid(resourceGroup().id, deployment().name)]",
		"severity": "Med",
		"description": "NYI: 'guid' not supported as yet",
		"template": "101-automation-configuration"
	}
	{
		"sourceElement": "automationAccountNameVar",
		"sourceToken": "[concat('DSC-',take(guid(resourceGroup().id),5))]",
		"severity": "Med",
		"description": "NYI: 'take' not supported as yet",
		"template": "101-automation-configuration"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-availability-set-create-3FDs-20UDs"
	}
	{
		"sourceElement": "serviceResource",
		"sourceToken": "[uri(environment().authentication.loginEndpoint, subscription().tenantId)]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-azure-api-for-fhir"
	}
	{
		"sourceElement": "apiManagementServiceNameVar",
		"sourceToken": "[concat('apiservice', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-azure-api-management-create"
	}
	{
		"sourceElement": "subnetResource",
		"sourceToken": "[equals(parameters('vnet-new-or-existing'), 'existing')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-azure-bastion"
	}
	{
		"sourceElement": "virtualNetworkResource",
		"sourceToken": "[equals(parameters('vnet-new-or-existing'), 'new')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-azure-bastion"
	}
	{
		"sourceElement": "subnetResource",
		"sourceToken": "[equals(parameters('vnet-new-or-existing'), 'existing')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-azure-bastion-nsg"
	}
	{
		"sourceElement": "virtualNetworkResource",
		"sourceToken": "[equals(parameters('vnet-new-or-existing'), 'new')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-azure-bastion-nsg"
	}
	{
		"sourceElement": "extensionResource1",
		"sourceToken": "[uri(parameters('_artifactsLocation'), 'templatefiles/AdventureWorks2016.bacpac')]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-azure-database-migration-service"
	}
	{
		"sourceElement": "extensionResource1",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Sql/servers/databases/extensions' and version '2014-04-01'",
		"template": "101-azure-database-migration-service"
	}
	{
		"sourceElement": "dMSServiceNameVar",
		"sourceToken": "[concat('DMS', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-azure-database-migration-service"
	}
	{
		"sourceElement": "serverResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), 'templatefiles/AdventureWorks2016.bacpac')]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-azure-database-migration-service"
	}
	{
		"sourceElement": "databaseResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), 'templatefiles/AdventureWorks2016.bacpac')]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-azure-database-migration-service"
	}
	{
		"sourceElement": "scriptFilesVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat(variables('scriptLocation'), parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-azure-database-migration-service"
	}
	{
		"sourceElement": "scriptFilesVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat(variables('bakFileLocation'), parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-azure-database-migration-service"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[toLower(concat(variables('storageAccountNamePrefix'), uniqueString(resourceGroup().id)))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-azure-database-migration-service"
	}
	{
		"sourceElement": "targetServerNameVar",
		"sourceToken": "[concat('targetservername', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-azure-database-migration-service"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[if(parameters('createPublicIP'), variables('publicIpAddressId'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-azure-database-migration-service"
	}
	{
		"sourceElement": "sourceServerNameVar",
		"sourceToken": "[take(concat('Source', uniqueString(resourceGroup().id)), 15)]",
		"severity": "Med",
		"description": "NYI: 'take' not supported as yet",
		"template": "101-azure-database-migration-service"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-azure-database-migration-simple-deploy"
	}
	{
		"sourceElement": "newZoneNameParam",
		"sourceToken": "[concat(uniqueString(resourceGroup().id), '.azurequickstart.org')]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-azure-dns-new-zone"
	}
	{
		"sourceElement": "aResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Network/dnsZones/A' and version '2018-05-01'",
		"template": "101-azure-dns-new-zone"
	}
	{
		"sourceElement": "dashboardNameParam",
		"sourceToken": "[guid(parameters('virtualMachineName'), parameters('virtualMachineResourceGroup'))]",
		"severity": "Med",
		"description": "NYI: 'guid' not supported as yet",
		"template": "101-azure-portal-dashboard"
	}
	{
		"sourceElement": "dashboardResource",
		"sourceToken": "[resourceId(parameters('virtualMachineResourceGroup'), 'Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-azure-portal-dashboard"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-azure-relay-create-namespace"
	}
	{
		"sourceElement": "searchServiceResource",
		"sourceToken": "[toLower(parameters('sku'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-azure-search-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-azure-sentinel"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-azure-spring-cloud"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for azureFirewallResource: missing variable: azureFirewallIpConfigurationsVar",
		"template": "101-azurefirewall-create-with-firewallpolicy-apprule-netrule-ipgroups"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for azureFirewallResource: missing variable: azureFirewallIpConfigurationsVar",
		"template": "101-azurefirewall-create-with-firewallpolicy-ipgroups"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for azureFirewallResource: missing variable: azureFirewallIpConfigurationsVar",
		"template": "101-azurefirewall-create-with-ipgroups-and-linux-jumpbox"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for azureFirewallResource: missing variable: azureFirewallIpConfigurationsVar",
		"template": "101-azurefirewall-create-with-zones"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for azureFirewallResource: missing variable: azureFirewallIpConfigurationsVar",
		"template": "101-azurefirewall-forced-tunneling"
	}
	{
		"sourceElement": "vaultResource",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-azurefirewall-premium"
	}
	{
		"sourceElement": "vaultResource",
		"sourceToken": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'), '2018-11-30').principalId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-azurefirewall-premium"
	}
	{
		"sourceElement": "vaultResource",
		"sourceToken": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'), '2018-11-30').tenantId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-azurefirewall-premium"
	}
	{
		"sourceElement": "keyVaultNameVar",
		"sourceToken": "[concat('fw-quick-', uniqueString(subscription().id, resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-azurefirewall-premium"
	}
	{
		"sourceElement": "demoFirewallPolicy",
		"sourceToken": "[concat(reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2019-09-01').vaultUri, 'secrets/', variables('keyVaultCASecretName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-azurefirewall-premium"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for azureFirewallResource: missing variable: azureFirewallIpConfigurationsVar",
		"template": "101-azurefirewall-sandbox-linux"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for azureFirewallResource: missing variable: azureFirewallIpConfigurationsVar",
		"template": "101-azurefirewall-with-firewallpolicy-sandbox-linux"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for azureFirewallResource: missing variable: azureFirewallIpConfigurationsVar",
		"template": "101-azurefirewall-with-zones-sandbox"
	}
	{
		"sourceElement": "policyAssignmentNameParam",
		"sourceToken": "[guid(parameters('policyDefinitionID'), resourceGroup().name)]",
		"severity": "Med",
		"description": "NYI: 'guid' not supported as yet",
		"template": "101-azurepolicy-assign-builtinpolicy-resourcegroup"
	}
	{
		"sourceElement": "policyAssignmentResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-azurepolicy-assign-builtinpolicy-resourcegroup"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-all-tabs-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-all-tabs-report"
	}
	{
		"sourceElement": "startDateParam",
		"sourceToken": "[dateTimeAdd(utcNow('u'), '-P7D')]",
		"severity": "Med",
		"description": "NYI: 'dateTimeAdd' not supported as yet",
		"template": "101-backup-all-tabs-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-all-tabs-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-all-tabs-report"
	}
	{
		"sourceElement": "endDateParam",
		"sourceToken": "[utcNow('u')]",
		"severity": "Med",
		"description": "NYI: 'utcNow' not supported as yet",
		"template": "101-backup-all-tabs-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-all-tabs-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-all-tabs-report"
	}
	{
		"sourceElement": "startDateParam",
		"sourceToken": "[dateTimeAdd(utcNow('u'), '-P7D')]",
		"severity": "Med",
		"description": "NYI: 'dateTimeAdd' not supported as yet",
		"template": "101-backup-backupinstances-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-backupinstances-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-backupinstances-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-backupinstances-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-backupinstances-report"
	}
	{
		"sourceElement": "endDateParam",
		"sourceToken": "[utcNow('u')]",
		"severity": "Med",
		"description": "NYI: 'utcNow' not supported as yet",
		"template": "101-backup-backupinstances-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-backupinstances-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-backupinstances-report"
	}
	{
		"sourceElement": "roleAssignmentResource",
		"sourceToken": "[reference(resourceId('Microsoft.DataProtection/backupVaults/', parameters('vaultName')), '2020-01-01-alpha', 'Full').identity.principalId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-backup-create-storage-account-enable-protection"
	}
	{
		"sourceElement": "storageAccountNameParam",
		"sourceToken": "[concat('store', uniquestring(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-backup-create-storage-account-enable-protection"
	}
	{
		"sourceElement": "roleDefinitionIdVar",
		"sourceToken": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-create-storage-account-enable-protection"
	}
	{
		"sourceElement": "vaultNameParam",
		"sourceToken": "[concat('vault', uniquestring(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-backup-create-storage-account-enable-protection"
	}
	{
		"sourceElement": "roleNameGuidParam",
		"sourceToken": "[newGuid()]",
		"severity": "Med",
		"description": "NYI: 'newGuid' not supported as yet",
		"template": "101-backup-create-storage-account-enable-protection"
	}
	{
		"sourceElement": "backupPolicyNameParam",
		"sourceToken": "[concat('policy', uniquestring(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-backup-create-storage-account-enable-protection"
	}
	{
		"sourceElement": "startDateParam",
		"sourceToken": "[dateTimeAdd(utcNow('u'), '-P7D')]",
		"severity": "Med",
		"description": "NYI: 'dateTimeAdd' not supported as yet",
		"template": "101-backup-jobs-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-jobs-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-jobs-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-jobs-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-jobs-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-jobs-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-jobs-report"
	}
	{
		"sourceElement": "endDateParam",
		"sourceToken": "[utcNow('u')]",
		"severity": "Med",
		"description": "NYI: 'utcNow' not supported as yet",
		"template": "101-backup-jobs-report"
	}
	{
		"sourceElement": "nestedTemplatesVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/backup_jobs_log.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-backup-la-reporting"
	}
	{
		"sourceElement": "nestedTemplatesVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/restore_jobs.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-backup-la-reporting"
	}
	{
		"sourceElement": "nestedTemplatesVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azure_alerts.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-backup-la-reporting"
	}
	{
		"sourceElement": "nestedTemplatesVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/on_prem_alerts.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-backup-la-reporting"
	}
	{
		"sourceElement": "nestedTemplatesVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/backup_items.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-backup-la-reporting"
	}
	{
		"sourceElement": "nestedTemplatesVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/cloud_storage.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-backup-la-reporting"
	}
	{
		"sourceElement": "nestedTemplatesVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/backup_jobs_non_log.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-backup-la-reporting"
	}
	{
		"sourceElement": "viewResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.OperationalInsights/workspaces/views' and version '2015-11-01-preview'",
		"template": "101-backup-oms-monitoring"
	}
	{
		"sourceElement": "startDateParam",
		"sourceToken": "[dateTimeAdd(utcNow('u'), '-P7D')]",
		"severity": "Med",
		"description": "NYI: 'dateTimeAdd' not supported as yet",
		"template": "101-backup-optimize-report"
	}
	{
		"sourceElement": "endDateParam",
		"sourceToken": "[utcNow('u')]",
		"severity": "Med",
		"description": "NYI: 'utcNow' not supported as yet",
		"template": "101-backup-optimize-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-optimize-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-optimize-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-optimize-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-optimize-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-optimize-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-optimize-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-policies-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-policies-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-policies-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-policies-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-policies-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-policies-report"
	}
	{
		"sourceElement": "startDateParam",
		"sourceToken": "[dateTimeAdd(utcNow('u'), '-P7D')]",
		"severity": "Med",
		"description": "NYI: 'dateTimeAdd' not supported as yet",
		"template": "101-backup-policies-report"
	}
	{
		"sourceElement": "endDateParam",
		"sourceToken": "[utcNow('u')]",
		"severity": "Med",
		"description": "NYI: 'utcNow' not supported as yet",
		"template": "101-backup-policies-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-policyadherence-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-policyadherence-report"
	}
	{
		"sourceElement": "endDateParam",
		"sourceToken": "[utcNow('u')]",
		"severity": "Med",
		"description": "NYI: 'utcNow' not supported as yet",
		"template": "101-backup-policyadherence-report"
	}
	{
		"sourceElement": "startDateParam",
		"sourceToken": "[dateTimeAdd(utcNow('u'), '-P7D')]",
		"severity": "Med",
		"description": "NYI: 'dateTimeAdd' not supported as yet",
		"template": "101-backup-policyadherence-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-policyadherence-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-policyadherence-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-policyadherence-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-policyadherence-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-summary-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-summary-report"
	}
	{
		"sourceElement": "endDateParam",
		"sourceToken": "[utcNow('u')]",
		"severity": "Med",
		"description": "NYI: 'utcNow' not supported as yet",
		"template": "101-backup-summary-report"
	}
	{
		"sourceElement": "startDateParam",
		"sourceToken": "[dateTimeAdd(utcNow('u'), '-P7D')]",
		"severity": "Med",
		"description": "NYI: 'dateTimeAdd' not supported as yet",
		"template": "101-backup-summary-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-summary-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-summary-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-summary-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-summary-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-usage-report"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-usage-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-usage-report"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-usage-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuremonitorlogs')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-backup-usage-report"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-backup-usage-report"
	}
	{
		"sourceElement": "startDateParam",
		"sourceToken": "[dateTimeAdd(utcNow('u'), '-P7D')]",
		"severity": "Med",
		"description": "NYI: 'dateTimeAdd' not supported as yet",
		"template": "101-backup-usage-report"
	}
	{
		"sourceElement": "endDateParam",
		"sourceToken": "[utcNow('u')]",
		"severity": "Med",
		"description": "NYI: 'utcNow' not supported as yet",
		"template": "101-backup-usage-report"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-backup-vault-basic"
	}
	{
		"sourceElement": "storageAccountResource",
		"sourceToken": "[toLower(parameters('storageAccountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-bastion-hub-spoke-vnet"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[resourceId('Microsoft.Storage/storageAccounts',toLower(parameters('storageAccountName')))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-bastion-hub-spoke-vnet"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts/', toLower(parameters('storageAccountName')))).primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-bastion-hub-spoke-vnet"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-batch-with-keyvault-pfx-password"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for storageAccountResource: missing variable: storageAccountnameVar",
		"template": "101-batchaccount-with-storage"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-cdn-with-custom-origin"
	}
	{
		"sourceElement": "aResource",
		"sourceToken": "[first(first(reference(parameters('privateEndpointName'),'2020-04-01','Full').properties.customDnsConfigs).ipAddresses)]",
		"severity": "Med",
		"description": "NYI: 'first' not supported as yet",
		"template": "101-cloud-shell-vnet"
	}
	{
		"sourceElement": "aResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Network/privateDnsZones/A' and version '2020-01-01'",
		"template": "101-cloud-shell-vnet"
	}
	{
		"sourceElement": "roleAssignmentResource0",
		"sourceToken": "[concat(parameters('relayNamespaceName'), '/Microsoft.Authorization/', guid(variables('contributorRoleDefinitionId'), parameters('azureContainerInstanceOID'), parameters('relayNamespaceName')))]",
		"severity": "Med",
		"description": "NYI: 'guid' not supported as yet",
		"template": "101-cloud-shell-vnet"
	}
	{
		"sourceElement": "roleAssignmentResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Relay/namespaces/providers/roleAssignments' and version '2018-09-01-preview'",
		"template": "101-cloud-shell-vnet"
	}
	{
		"sourceElement": "privateDnsZoneNameVar",
		"sourceToken": "[if(equals(toLower(environment().name), 'azureusgovernment'), 'privatelink.servicebus.usgovcloudapi.net', 'privatelink.servicebus.windows.net')]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-cloud-shell-vnet"
	}
	{
		"sourceElement": "roleAssignmentResource",
		"sourceToken": "[concat(variables('networkProfileName'), '/Microsoft.Authorization/', guid(variables('networkRoleDefinitionId'), parameters('azureContainerInstanceOID'), variables('networkProfileName')))]",
		"severity": "Med",
		"description": "NYI: 'guid' not supported as yet",
		"template": "101-cloud-shell-vnet"
	}
	{
		"sourceElement": "roleAssignmentResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Network/networkProfiles/providers/roleAssignments' and version '2018-09-01-preview'",
		"template": "101-cloud-shell-vnet"
	}
	{
		"sourceElement": "shareResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Storage/storageAccounts/fileServices/shares' and version '2019-06-01'",
		"template": "101-cloud-shell-vnet-storage"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-cognitive-services-Computer-vision-API"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-cognitive-services-translate"
	}
	{
		"sourceElement": "cognitiveServiceNameParam",
		"sourceToken": "[concat('CognitiveService-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cognitive-services-universalkey"
	}
	{
		"sourceElement": "acrLoginServerOut",
		"sourceToken": "[reference(resourceId('Microsoft.ContainerRegistry/registries',parameters('acrName')),'2019-12-01-preview').loginServer]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-container-registry"
	}
	{
		"sourceElement": "acrNameParam",
		"sourceToken": "[concat('acr', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-container-registry-geo-replication"
	}
	{
		"sourceElement": "acrLoginServerOut",
		"sourceToken": "[reference(resourceId('Microsoft.ContainerRegistry/registries',parameters('acrName')),'2019-12-01-preview').loginServer]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-container-registry-geo-replication"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-cassandra"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('sql-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-cassandra"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('cassandra-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-cassandra-autoscale"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-cassandra-autoscale"
	}
	{
		"sourceElement": "nameParam",
		"sourceToken": "[uniqueString('cosmosdb', resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-create-account"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-create-multi-region-account"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-create-multi-region-account"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('cosmos-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-free"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-free"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-gremlin"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-gremlin"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-gremlin-autoscale"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('gremlin-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-gremlin-autoscale"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('mongodb-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-mongodb"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-mongodb"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-mongodb-autoscale"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('mongodb-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-mongodb-autoscale"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-private-endpoint"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-sql"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('sql-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-sql"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-sql-analytical-store"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('cosmos', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-sql-analytical-store"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('sql-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-sql-autoscale"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-sql-autoscale"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('cosmos-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-sql-container-sprocs"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-sql-container-sprocs"
	}
	{
		"sourceElement": "databaseResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DocumentDB/databaseAccounts/apis/databases' and version '2016-03-31'",
		"template": "101-cosmosdb-sql-multiple-containers"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "[parameters('containers')[copyIndex()].name]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-cosmosdb-sql-multiple-containers"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "[parameters('containers')[copyIndex()].partitionKey]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-cosmosdb-sql-multiple-containers"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "[concat(parameters('accountName'), '/sql/', parameters('databaseName'), '/', parameters('containers')[copyIndex()].name)]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-cosmosdb-sql-multiple-containers"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "[length(parameters('containers'))]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-cosmosdb-sql-multiple-containers"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DocumentDb/databaseAccounts/apis/databases/containers' and version '2016-03-31'",
		"template": "101-cosmosdb-sql-multiple-containers"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('sql-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-sql-multiple-containers"
	}
	{
		"sourceElement": "roleDefinitionIdVar",
		"sourceToken": "[guid('sql-role-definition-', resourceId('Microsoft.DocumentDB/databaseAccounts', variables('accountName')))]",
		"severity": "Med",
		"description": "NYI: 'guid' not supported as yet",
		"template": "101-cosmosdb-sql-rbac"
	}
	{
		"sourceElement": "roleAssignmentIdVar",
		"sourceToken": "[guid('sql-role-assignment-', resourceId('Microsoft.DocumentDB/databaseAccounts', variables('accountName')))]",
		"severity": "Med",
		"description": "NYI: 'guid' not supported as yet",
		"template": "101-cosmosdb-sql-rbac"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('sql-rbac-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-sql-rbac"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-sql-rbac"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-table"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('table-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-table"
	}
	{
		"sourceElement": "accountNameVar",
		"sourceToken": "[toLower(parameters('accountName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-table-autoscale"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[concat('table-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-table-autoscale"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.DocumentDb/databaseAccounts', variables('cosmosAccountName')), '2021-01-15').primaryMasterKey]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-cosmosdb-webapp"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[reference(resourceId('Microsoft.DocumentDb/databaseAccounts/', variables('cosmosAccountName'))).documentEndpoint]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-cosmosdb-webapp"
	}
	{
		"sourceElement": "cosmosAccountNameVar",
		"sourceToken": "[toLower(parameters('applicationName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-cosmosdb-webapp"
	}
	{
		"sourceElement": "sourcecontrolResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/sourcecontrols' and version '2019-08-01'",
		"template": "101-cosmosdb-webapp"
	}
	{
		"sourceElement": "applicationNameParam",
		"sourceToken": "[concat('to-do-app', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-cosmosdb-webapp"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-create-and-enable-ddos-protection-plans"
	}
	{
		"sourceElement": "aSENameVar",
		"sourceToken": "[concat('ASE', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-create-ase-with-webapp"
	}
	{
		"sourceElement": "aSEVNETNameVar",
		"sourceToken": "[concat('ASE-VNET', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-create-ase-with-webapp"
	}
	{
		"sourceElement": "aSEWEBAPPNameVar",
		"sourceToken": "[concat('ASE-WEB-APP', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-create-ase-with-webapp"
	}
	{
		"sourceElement": "aSESERVICENameVar",
		"sourceToken": "[concat('ASE-SERVICE', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-create-ase-with-webapp"
	}
	{
		"sourceElement": "customResourceProviderNameParam",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-custom-rp-existing-resource-deployments"
	}
	{
		"sourceElement": "customProviderInfrastructureTemplate",
		"sourceToken": "[listCallbackURL(resourceId('Microsoft.Logic/workflows/triggers', parameters('logicAppName'), 'CustomProviderWebhook'), '2019-05-01').value]",
		"severity": "Med",
		"description": "NYI: 'listCallbackURL' not supported as yet",
		"template": "101-custom-rp-existing-resource-deployments"
	}
	{
		"sourceElement": "customProviderInfrastructureTemplate",
		"sourceToken": "[empty(parameters('customResourceProviderId'))]",
		"severity": "Med",
		"description": "NYI: 'empty' not supported as yet",
		"template": "101-custom-rp-existing-resource-deployments"
	}
	{
		"sourceElement": "associationResource",
		"sourceToken": "[if(empty(parameters('customResourceProviderId')), reference('customProviderInfrastructureTemplate').outputs.customProviderResourceId.value, parameters('customResourceProviderId'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-custom-rp-existing-resource-deployments"
	}
	{
		"sourceElement": "logicAppNameParam",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-custom-rp-existing-resource-deployments"
	}
	{
		"sourceElement": "logicAppNameParam",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-custom-rp-with-logicapp"
	}
	{
		"sourceElement": "customResourceProviderNameParam",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-custom-rp-with-logicapp"
	}
	{
		"sourceElement": "resourceProviderResource",
		"sourceToken": "[listCallbackURL(resourceId('Microsoft.Logic/workflows/triggers', parameters('logicAppName'), 'CustomProviderWebhook'), '2019-05-01').value]",
		"severity": "Med",
		"description": "NYI: 'listCallbackURL' not supported as yet",
		"template": "101-custom-rp-with-logicapp"
	}
	{
		"sourceElement": "customResourceOut",
		"sourceToken": "[reference(parameters('customResourceName'), '2018-09-01-preview', 'Full')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-custom-rp-with-logicapp"
	}
	{
		"sourceElement": "customResourceResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.CustomProviders/resourceProviders/customResources' and version '2018-09-01-preview'",
		"template": "101-custom-rp-with-logicapp"
	}
	{
		"sourceElement": "dataFactoryNameVar",
		"sourceToken": "[concat('AzureBlobToAzureSQLDatabaseDF', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-data-factory-blob-to-sql-copy"
	}
	{
		"sourceElement": "linkedserviceResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/linkedservices' and version '2015-10-01'",
		"template": "101-data-factory-blob-to-sql-copy"
	}
	{
		"sourceElement": "datasetResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datasets' and version '2015-10-01'",
		"template": "101-data-factory-blob-to-sql-copy"
	}
	{
		"sourceElement": "datapipelineResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datapipelines' and version '2015-10-01'",
		"template": "101-data-factory-blob-to-sql-copy"
	}
	{
		"sourceElement": "datafactoryResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories' and version '2015-10-01'",
		"template": "101-data-factory-blob-to-sql-copy"
	}
	{
		"sourceElement": "linkedserviceResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/linkedservices' and version '2015-10-01'",
		"template": "101-data-factory-blob-to-sql-copy"
	}
	{
		"sourceElement": "datasetResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datasets' and version '2015-10-01'",
		"template": "101-data-factory-blob-to-sql-copy"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for linkedserviceResource0: missing parameter: sqlUserIdParam",
		"template": "101-data-factory-blob-to-sql-copy-stored-proc"
	}
	{
		"sourceElement": "gatewayNameVar",
		"sourceToken": "[concat('Gateway', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "linkedserviceResource1",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/linkedservices' and version '2015-10-01'",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "datasetResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datasets' and version '2015-10-01'",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "datasetResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datasets' and version '2015-10-01'",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "linkedserviceResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/linkedservices' and version '2015-10-01'",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "gatewayResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/gateways' and version '2015-10-01'",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "linkedserviceResource",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "linkedserviceResource",
		"sourceToken": "[subscription().subscriptionId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "linkedserviceResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/linkedservices' and version '2015-10-01'",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "dataFactoryNameVar",
		"sourceToken": "[concat('CopyFromSQLToADFToAzureSQL', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "datafactoryResource",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "datafactoryResource",
		"sourceToken": "[subscription().subscriptionId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "datafactoryResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories' and version '2015-10-01'",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "datasetResource1",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datasets' and version '2015-10-01'",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "dataPipelineResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/dataPipelines' and version '2015-10-01'",
		"template": "101-data-factory-chained-copy-activities"
	}
	{
		"sourceElement": "datapipelineResource",
		"sourceToken": "[concat(replace(reference(resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2016-01-01').primaryEndpoints.blob, 'https://', concat('wasb://', parameters('blobContainer'), '@')), parameters('outputBlobFolder'))]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-data-factory-hive-transformation"
	}
	{
		"sourceElement": "datapipelineResource",
		"sourceToken": "[concat(replace(reference(resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2016-01-01').primaryEndpoints.blob, 'https://', concat('wasb://', parameters('blobContainer'), '@')), parameters('inputBlobFolder'))]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-data-factory-hive-transformation"
	}
	{
		"sourceElement": "datapipelineResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datapipelines' and version '2015-10-01'",
		"template": "101-data-factory-hive-transformation"
	}
	{
		"sourceElement": "datasetResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datasets' and version '2015-10-01'",
		"template": "101-data-factory-hive-transformation"
	}
	{
		"sourceElement": "datasetResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datasets' and version '2015-10-01'",
		"template": "101-data-factory-hive-transformation"
	}
	{
		"sourceElement": "linkedserviceResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/linkedservices' and version '2015-10-01'",
		"template": "101-data-factory-hive-transformation"
	}
	{
		"sourceElement": "linkedserviceResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/linkedservices' and version '2015-10-01'",
		"template": "101-data-factory-hive-transformation"
	}
	{
		"sourceElement": "dataFactoryNameVar",
		"sourceToken": "[concat('HiveTransformDF', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-data-factory-hive-transformation"
	}
	{
		"sourceElement": "datafactoryResource",
		"sourceToken": "[concat(replace(reference(resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2016-01-01').primaryEndpoints.blob, 'https://', concat('wasb://', parameters('blobContainer'), '@')), parameters('outputBlobFolder'))]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-data-factory-hive-transformation"
	}
	{
		"sourceElement": "datafactoryResource",
		"sourceToken": "[concat(replace(reference(resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2016-01-01').primaryEndpoints.blob, 'https://', concat('wasb://', parameters('blobContainer'), '@')), parameters('inputBlobFolder'))]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-data-factory-hive-transformation"
	}
	{
		"sourceElement": "datafactoryResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories' and version '2015-10-01'",
		"template": "101-data-factory-hive-transformation"
	}
	{
		"sourceElement": "linkedserviceResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/linkedservices' and version '2015-10-01'",
		"template": "101-data-factory-salesforce-to-blob-copy"
	}
	{
		"sourceElement": "linkedserviceResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/linkedservices' and version '2015-10-01'",
		"template": "101-data-factory-salesforce-to-blob-copy"
	}
	{
		"sourceElement": "datasetResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datasets' and version '2015-10-01'",
		"template": "101-data-factory-salesforce-to-blob-copy"
	}
	{
		"sourceElement": "datasetResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datasets' and version '2015-10-01'",
		"template": "101-data-factory-salesforce-to-blob-copy"
	}
	{
		"sourceElement": "datapipelineResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories/datapipelines' and version '2015-10-01'",
		"template": "101-data-factory-salesforce-to-blob-copy"
	}
	{
		"sourceElement": "datafactoryResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/datafactories' and version '2015-10-01'",
		"template": "101-data-factory-salesforce-to-blob-copy"
	}
	{
		"sourceElement": "dataFactoryNameVar",
		"sourceToken": "[concat('SalesforceToAzureBlobDF', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-data-factory-salesforce-to-blob-copy"
	}
	{
		"sourceElement": "storageAccountNameParam",
		"sourceToken": "[concat('storage', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-data-factory-v2-blob-to-blob-copy"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Storage/storageAccounts/blobServices/containers' and version '2019-06-01'",
		"template": "101-data-factory-v2-blob-to-blob-copy"
	}
	{
		"sourceElement": "factoryResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',listKeys(variables('storageAccountId'), '2019-06-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-data-factory-v2-blob-to-blob-copy"
	}
	{
		"sourceElement": "linkedServiceResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',listKeys(variables('storageAccountId'), '2019-06-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-data-factory-v2-blob-to-blob-copy"
	}
	{
		"sourceElement": "blobContainerParam",
		"sourceToken": "[concat('blob', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-data-factory-v2-blob-to-blob-copy"
	}
	{
		"sourceElement": "dataFactoryNameParam",
		"sourceToken": "[concat('datafactory', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-data-factory-v2-blob-to-blob-copy"
	}
	{
		"sourceElement": "linkedserviceResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=', split(split(reference(parameters('storageAccountResourceId'), '2019-04-01').primaryEndpoints.blob, '/')[2], '.')[0], ';AccountKey=', listKeys(parameters('storageAccountResourceId'), '2019-04-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'split' not supported as yet",
		"template": "101-data-factory-v2-blob-to-mysql-copy"
	}
	{
		"sourceElement": "factoryResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=', split(split(reference(parameters('storageAccountResourceId'), '2019-04-01').primaryEndpoints.blob, '/')[2], '.')[0], ';AccountKey=', listKeys(parameters('storageAccountResourceId'), '2019-04-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'split' not supported as yet",
		"template": "101-data-factory-v2-blob-to-mysql-copy"
	}
	{
		"sourceElement": "factoryResource",
		"sourceToken": "[concat('Server=', reference(parameters('mysqlResourceId'), '2017-12-01').fullyQualifiedDomainName, ';Port=3306;Database=' ,parameters('mysqlDatabase'), ';UID=', parameters('mysqlUserName'), ';PWD=', parameters('mysqlPassword'), ';SslMode=Preferred;')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-data-factory-v2-blob-to-mysql-copy"
	}
	{
		"sourceElement": "dataFactoryNameParam",
		"sourceToken": "[uniquestring(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-data-factory-v2-blob-to-mysql-copy"
	}
	{
		"sourceElement": "linkedserviceResource0",
		"sourceToken": "[concat('Server=', reference(parameters('mysqlResourceId'), '2017-12-01').fullyQualifiedDomainName, ';Port=3306;Database=' ,parameters('mysqlDatabase'), ';UID=', parameters('mysqlUserName'), ';PWD=', parameters('mysqlPassword'), ';SslMode=Preferred;')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-data-factory-v2-blob-to-mysql-copy"
	}
	{
		"sourceElement": "linkedserviceResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=', split(split(reference(parameters('storageAccountResourceId'), '2019-04-01').primaryEndpoints.blob, '/')[2], '.')[0], ';AccountKey=', listKeys(parameters('storageAccountResourceId'), '2019-04-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'split' not supported as yet",
		"template": "101-data-factory-v2-blob-to-postgresql-copy"
	}
	{
		"sourceElement": "dataFactoryNameParam",
		"sourceToken": "[uniquestring(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-data-factory-v2-blob-to-postgresql-copy"
	}
	{
		"sourceElement": "factoryResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=', split(split(reference(parameters('storageAccountResourceId'), '2019-04-01').primaryEndpoints.blob, '/')[2], '.')[0], ';AccountKey=', listKeys(parameters('storageAccountResourceId'), '2019-04-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'split' not supported as yet",
		"template": "101-data-factory-v2-blob-to-postgresql-copy"
	}
	{
		"sourceElement": "factoryResource",
		"sourceToken": "[concat('Server=', reference(parameters('postgreSqlResourceId'), '2017-12-01').fullyQualifiedDomainName, ';Port=5432;Database=' ,parameters('postgreSqlDatabase'), ';UID=', parameters('postgreSqlUserName'), ';Password=', parameters('postgreSqlPassword'), ';SSL Mode=Require')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-data-factory-v2-blob-to-postgresql-copy"
	}
	{
		"sourceElement": "linkedserviceResource0",
		"sourceToken": "[concat('Server=', reference(parameters('postgreSqlResourceId'), '2017-12-01').fullyQualifiedDomainName, ';Port=5432;Database=' ,parameters('postgreSqlDatabase'), ';UID=', parameters('postgreSqlUserName'), ';Password=', parameters('postgreSqlPassword'), ';SSL Mode=Require')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-data-factory-v2-blob-to-postgresql-copy"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-data-factory-v2-blob-to-sql-copy"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-data-factory-v2-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for datasetResource0: failed to parse expression '\"[concat(parameters('blobContainer'), '\\', parameters('outputBlobFolder'))]\"': expected a comma (',')",
		"template": "101-data-factory-v2-onprem-sql-to-blob-copy"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-data-factory-v2-provision-ssis-runtime"
	}
	{
		"sourceElement": "factoryResource",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-data-factory-v2-transform-using-spark"
	}
	{
		"sourceElement": "linkedserviceResource0",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-data-factory-v2-transform-using-spark"
	}
	{
		"sourceElement": "adlAnalyticsAccountOut",
		"sourceToken": "[reference(resourceId('Microsoft.DataLakeAnalytics/accounts',parameters('adlAnalyticsName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-data-lake-analytics"
	}
	{
		"sourceElement": "adlStoreAccountOut",
		"sourceToken": "[reference(resourceId('Microsoft.DataLakeStore/accounts',parameters('adlStoreName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-data-lake-analytics"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-data-lake-store-encryption-adls"
	}
	{
		"sourceElement": "dataLakeStoreNameParam",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-data-lake-store-encryption-key-vault"
	}
	{
		"sourceElement": "accountResource",
		"sourceToken": "[resourceId(parameters('keyVaultResourceGroupName'), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-data-lake-store-encryption-key-vault"
	}
	{
		"sourceElement": "addAccessPolicy",
		"sourceToken": "[reference(resourceId('Microsoft.DataLakeStore/accounts', parameters('dataLakeStoreName')), '2016-11-01', 'Full').identity.principalId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-data-lake-store-encryption-key-vault"
	}
	{
		"sourceElement": "addAccessPolicy",
		"sourceToken": "[reference(resourceId('Microsoft.DataLakeStore/accounts', parameters('dataLakeStoreName')), '2016-11-01', 'Full').identity.tenantId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-data-lake-store-encryption-key-vault"
	}
	{
		"sourceElement": "updateAdlsAccount",
		"sourceToken": "[resourceId(parameters('keyVaultResourceGroupName'), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-data-lake-store-encryption-key-vault"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-data-lake-store-no-encryption"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-data-share-account"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-data-share-share"
	}
	{
		"sourceElement": "roleAssignmentResource",
		"sourceToken": "[format('Microsoft.Storage/storageAccounts/{0}', variables('storageAccountName'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-data-share-share-storage-account"
	}
	{
		"sourceElement": "roleAssignmentResource",
		"sourceToken": "[reference(resourceId('Microsoft.DataShare/accounts', variables('dataShareAccountName')), '2019-11-01', 'Full').identity.principalId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-data-share-share-storage-account"
	}
	{
		"sourceElement": "syncTimeParam",
		"sourceToken": "[utcNow('yyyy-MM-ddTHH:mm:ssZ')]",
		"severity": "Med",
		"description": "NYI: 'utcNow' not supported as yet",
		"template": "101-data-share-share-storage-account"
	}
	{
		"sourceElement": "synchronizationSettingResource",
		"sourceToken": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), 'Microsoft.Authorization/roleAssignments', variables('roleAssignmentName'))]",
		"severity": "Med",
		"description": "NYI: 'extensionResourceId' not supported as yet",
		"template": "101-data-share-share-storage-account"
	}
	{
		"sourceElement": "invitationResource",
		"sourceToken": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), 'Microsoft.Authorization/roleAssignments', variables('roleAssignmentName'))]",
		"severity": "Med",
		"description": "NYI: 'extensionResourceId' not supported as yet",
		"template": "101-data-share-share-storage-account"
	}
	{
		"sourceElement": "dataSetResource",
		"sourceToken": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), 'Microsoft.Authorization/roleAssignments', variables('roleAssignmentName'))]",
		"severity": "Med",
		"description": "NYI: 'extensionResourceId' not supported as yet",
		"template": "101-data-share-share-storage-account"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Storage/storageAccounts/blobServices/containers' and version '2019-06-01'",
		"template": "101-data-share-share-storage-account"
	}
	{
		"sourceElement": "storageAccountSubscriptionIDParam",
		"sourceToken": "[subscription().subscriptionId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-data-share-share-storage-account"
	}
	{
		"sourceElement": "roleAssignmentNameVar",
		"sourceToken": "[guid(uniqueString(variables('storageAccountName'), variables('storageBlobDataReaderRoleDefinitionId'), variables('dataShareAccountName')))]",
		"severity": "Med",
		"description": "NYI: 'guid' not supported as yet",
		"template": "101-data-share-share-storage-account"
	}
	{
		"sourceElement": "managedResourceGroupNameVar",
		"sourceToken": "[concat('databricks-rg-', parameters('workspaceName'), '-', uniqueString(parameters('workspaceName'), resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-databricks-all-in-one-template-for-vnet-injection"
	}
	{
		"sourceElement": "managedResourceGroupIdVar",
		"sourceToken": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('managedResourceGroupName'))]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-databricks-all-in-one-template-for-vnet-injection"
	}
	{
		"sourceElement": "managedResourceGroupNameVar",
		"sourceToken": "[concat('databricks-rg-', parameters('workspaceName'), '-', uniqueString(parameters('workspaceName'), resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-databricks-all-in-one-template-for-vnet-injection-with-load-balancer"
	}
	{
		"sourceElement": "managedResourceGroupIdVar",
		"sourceToken": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('managedResourceGroupName'))]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-databricks-all-in-one-template-for-vnet-injection-with-load-balancer"
	}
	{
		"sourceElement": "managedResourceGroupIdVar",
		"sourceToken": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('managedResourceGroupName'))]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-databricks-all-in-one-template-for-vnet-injection-with-nat-gateway"
	}
	{
		"sourceElement": "managedResourceGroupNameVar",
		"sourceToken": "[concat('databricks-rg-', parameters('workspaceName'), '-', uniqueString(parameters('workspaceName'), resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-databricks-all-in-one-template-for-vnet-injection-with-nat-gateway"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-databricks-vnet-for-vnet-injection"
	}
	{
		"sourceElement": "managedResourceGroupNameVar",
		"sourceToken": "[concat('databricks-rg-', parameters('workspaceName'), '-', uniqueString(parameters('workspaceName'), resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-databricks-workspace"
	}
	{
		"sourceElement": "workspaceResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('managedResourceGroupName'))]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-databricks-workspace"
	}
	{
		"sourceElement": "workspaceOut",
		"sourceToken": "[reference(resourceId('Microsoft.Databricks/workspaces', parameters('workspaceName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-databricks-workspace"
	}
	{
		"sourceElement": "managedResourceGroupNameVar",
		"sourceToken": "[concat('databricks-rg-', parameters('workspaceName'), '-', uniqueString(parameters('workspaceName'), resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-databricks-workspace-with-custom-vnet-address"
	}
	{
		"sourceElement": "workspaceResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('managedResourceGroupName'))]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-databricks-workspace-with-custom-vnet-address"
	}
	{
		"sourceElement": "workspaceOut",
		"sourceToken": "[reference(resourceId('Microsoft.Databricks/workspaces', parameters('workspaceName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-databricks-workspace-with-custom-vnet-address"
	}
	{
		"sourceElement": "workspaceOut",
		"sourceToken": "[reference(resourceId('Microsoft.Databricks/workspaces', parameters('workspaceName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-databricks-workspace-with-customer-managed-keys"
	}
	{
		"sourceElement": "managedResourceGroupNameVar",
		"sourceToken": "[concat('databricks-rg-', parameters('workspaceName'), '-', uniqueString(parameters('workspaceName'), resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-databricks-workspace-with-customer-managed-keys"
	}
	{
		"sourceElement": "configureCMKOnWorkspace",
		"sourceToken": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('managedResourceGroupName'))]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-databricks-workspace-with-customer-managed-keys"
	}
	{
		"sourceElement": "configureCMKOnWorkspace",
		"sourceToken": "[concat('https://', parameters('keyVaultName'), environment().suffixes.keyvaultDns)]",
		"severity": "Med",
		"description": "NYI: 'environment' not supported as yet",
		"template": "101-databricks-workspace-with-customer-managed-keys"
	}
	{
		"sourceElement": "workspaceNameParam",
		"sourceToken": "[concat('ws', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-databricks-workspace-with-customer-managed-keys"
	}
	{
		"sourceElement": "workspaceResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('managedResourceGroupName'))]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-databricks-workspace-with-customer-managed-keys"
	}
	{
		"sourceElement": "addAccessPolicy",
		"sourceToken": "[reference(resourceId('Microsoft.Databricks/workspaces', parameters('workspaceName')), '2018-04-01').storageAccountIdentity.principalId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-databricks-workspace-with-customer-managed-keys"
	}
	{
		"sourceElement": "addAccessPolicy",
		"sourceToken": "[reference(resourceId('Microsoft.Databricks/workspaces', parameters('workspaceName')), '2018-04-01').storageAccountIdentity.tenantId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-databricks-workspace-with-customer-managed-keys"
	}
	{
		"sourceElement": "managedResourceGroupIdVar",
		"sourceToken": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('managedResourceGroupName'))]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-databricks-workspace-with-vnet-injection"
	}
	{
		"sourceElement": "managedResourceGroupNameVar",
		"sourceToken": "[concat('databricks-rg-', parameters('workspaceName'), '-', uniqueString(parameters('workspaceName'), resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-databricks-workspace-with-vnet-injection"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-default-shared-dashboard"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-dtl-create-lab"
	}
	{
		"sourceElement": "labResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DevTestLab/labs' and version '2018-10-15-preview'",
		"template": "101-dtl-create-lab-windows-vm"
	}
	{
		"sourceElement": "virtualNetworkResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DevTestLab/labs/virtualNetworks' and version '2018-10-15-preview'",
		"template": "101-dtl-create-lab-windows-vm"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DevTestLab/labs/virtualMachines' and version '2018-10-15-preview'",
		"template": "101-dtl-create-lab-windows-vm"
	}
	{
		"sourceElement": "eventGridTopicNameParam",
		"sourceToken": "[format('topic-{0}', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-event-grid"
	}
	{
		"sourceElement": "eventGridSubscriptionNameParam",
		"sourceToken": "[format('sub-{0}', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-event-grid"
	}
	{
		"sourceElement": "eventSubscriptionResource",
		"sourceToken": "[format('Microsoft.EventGrid/topics/{0}', parameters('eventGridTopicName'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-event-grid"
	}
	{
		"sourceElement": "logicAppNameParam",
		"sourceToken": "[concat('logicapp-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-event-grid-cloudevents"
	}
	{
		"sourceElement": "eventGridTopicNameParam",
		"sourceToken": "[concat('eventgridtopic-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-event-grid-cloudevents"
	}
	{
		"sourceElement": "eventGridSubscriptionVar",
		"sourceToken": "[split(parameters('eventGridSubscriptionIncludedEventTypes'), ',')]",
		"severity": "Med",
		"description": "NYI: 'split' not supported as yet",
		"template": "101-event-grid-cloudevents"
	}
	{
		"sourceElement": "eventGridSubscriptionNameParam",
		"sourceToken": "[concat('eventgridsubscription-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-event-grid-cloudevents"
	}
	{
		"sourceElement": "eventGridTopicSasKeyOut",
		"sourceToken": "[listKeys(variables('eventGridTopic').resourceId, '2018-05-01-preview').key1]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-event-grid-cloudevents"
	}
	{
		"sourceElement": "eventSubscriptionResource",
		"sourceToken": "[listCallbackUrl(variables('logicApp').triggerId, '2017-07-01').value]",
		"severity": "Med",
		"description": "NYI: 'listCallbackUrl' not supported as yet",
		"template": "101-event-grid-cloudevents"
	}
	{
		"sourceElement": "eventSubscriptionResource",
		"sourceToken": "[format('Microsoft.EventGrid/topics/{0}', variables('eventGridTopic').name)]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-event-grid-cloudevents"
	}
	{
		"sourceElement": "topicNameParam",
		"sourceToken": "[concat('topic', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-event-grid-event-hubs-handler"
	}
	{
		"sourceElement": "eventHubNamespaceParam",
		"sourceToken": "[concat('namespace', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-event-grid-event-hubs-handler"
	}
	{
		"sourceElement": "eventSubscriptionResource",
		"sourceToken": "[format('Microsoft.EventGrid/topics/{0}', parameters('topicName'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-event-grid-event-hubs-handler"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-event-grid-resource-events-to-webhook"
	}
	{
		"sourceElement": "eventSubscriptionResource",
		"sourceToken": "[format('Microsoft.EventGrid/topics/{0}', parameters('eventGridTopicName'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-event-grid-servicebus-queue"
	}
	{
		"sourceElement": "eventGridTopicNameParam",
		"sourceToken": "[concat('egt-', uniqueString(resourceGroup().id, parameters('serviceBusNamespaceName')))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-event-grid-servicebus-topic"
	}
	{
		"sourceElement": "serviceBusNamespaceNameParam",
		"sourceToken": "[concat('sb-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-event-grid-servicebus-topic"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for systemTopicResource: failed to parse expression '\"[resourceId('Microsoft.Storage/storageAccounts', parameters('storageName'))]\"': expected the end of the string: 48",
		"template": "101-event-grid-subscription-and-storage"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-eventhubs-create-namespace-and-eventhub"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-expressroute-circuit-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-expressroute-private-peering-vnet"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Network/frontDoors' and version '2020-07-01'",
		"template": "101-front-door-create-basic"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[length(parameters('backendPools1').backends)]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools1').backends[copyIndex('backends')].address]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools1').backends[copyIndex('backends')].httpPort]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools1').backends[copyIndex('backends')].httpsPort]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools1').backends[copyIndex('backends')].weight]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools1').backends[copyIndex('backends')].priority]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools1').backends[copyIndex('backends')].enabledState]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools2').backends[copyIndex('backends')].httpsPort]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools2').backends[copyIndex('backends')].weight]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools2').backends[copyIndex('backends')].priority]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools2').backends[copyIndex('backends')].enabledState]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools2').backends[copyIndex('backends')].address]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[parameters('backendPools2').backends[copyIndex('backends')].httpPort]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "frontDoorResource",
		"sourceToken": "[length(parameters('backendPools2').backends)]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-front-door-create-multiple-backends"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-front-door-create-redirect"
	}
	{
		"sourceElement": "customHttpsConfigurationResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Network/frontdoors/frontendEndpoints/customHttpsConfiguration' and version '2020-07-01'",
		"template": "101-front-door-custom-domain"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-front-door-geo-filtering"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'environment' not supported as yet",
		"template": "101-function-app-create-dedicated"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[reference(resourceId('microsoft.insights/components', variables('applicationInsightsName')), '2020-02-02-preview').InstrumentationKey]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-function-app-create-dedicated"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'functions')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-function-app-create-dedicated"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'environment' not supported as yet",
		"template": "101-function-app-create-dedicated"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "[reference(resourceId('microsoft.insights/components', variables('applicationInsightsName')), '2020-02-02-preview').InstrumentationKey]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-function-app-create-dedicated"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2018-11-01'",
		"template": "101-function-app-create-dedicated"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-function-app-create-dynamic"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'environment' not supported as yet",
		"template": "101-function-app-create-dynamic"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[toLower(variables('functionAppName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-function-app-create-dynamic"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[reference(resourceId('microsoft.insights/components', variables('applicationInsightsName')), '2020-02-02-preview').InstrumentationKey]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-function-app-create-dynamic"
	}
	{
		"sourceElement": "appNameParam",
		"sourceToken": "[concat('fnapp', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-function-app-create-dynamic"
	}
	{
		"sourceElement": "appNameParam",
		"sourceToken": "[concat('fnapp', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-function-app-create-dynamic-slot"
	}
	{
		"sourceElement": "slotResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'environment' not supported as yet",
		"template": "101-function-app-create-dynamic-slot"
	}
	{
		"sourceElement": "slotResource",
		"sourceToken": "[reference(resourceId('microsoft.insights/components', variables('applicationInsightsName')), '2020-02-02-preview').InstrumentationKey]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-function-app-create-dynamic-slot"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-function-app-create-dynamic-slot"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'environment' not supported as yet",
		"template": "101-function-app-create-dynamic-slot"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[toLower(variables('functionAppName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-function-app-create-dynamic-slot"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[reference(resourceId('microsoft.insights/components', variables('applicationInsightsName')), '2020-02-02-preview').InstrumentationKey]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-function-app-create-dynamic-slot"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for virtualNetworkLinksSuffixTableStorageNameVar: missing variable: privateStorageTableDNSZoneNameVar",
		"template": "101-function-app-storage-private-endpoints"
	}
	{
		"sourceElement": "appNameParam",
		"sourceToken": "[concat('fnapp', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-function-premium-vnet-integration"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-function-premium-vnet-integration"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value,';')]",
		"severity": "Med",
		"description": "NYI: 'environment' not supported as yet",
		"template": "101-function-premium-vnet-integration"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[reference(variables('appInsightsResourceId'), '2018-05-01-preview').instrumentationKey]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-function-premium-vnet-integration"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('InstrumentationKey=', reference(variables('appInsightsResourceId'), '2018-05-01-preview').instrumentationKey)]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-function-premium-vnet-integration"
	}
	{
		"sourceElement": "networkConfigResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/networkConfig' and version '2019-08-01'",
		"template": "101-function-premium-vnet-integration"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-autoscale-loadbased"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-autoscale-loadbased"
	}
	{
		"sourceElement": "clusterNameParam",
		"sourceToken": "[concat('hdi', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-autoscale-loadbased"
	}
	{
		"sourceElement": "storageOut",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-autoscale-loadbased"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-autoscale-loadbased"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-autoscale-loadbased"
	}
	{
		"sourceElement": "clusterNameParam",
		"sourceToken": "[concat('hdi', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-autoscale-schedulebased"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-autoscale-schedulebased"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2018-11-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-autoscale-schedulebased"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2018-11-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-autoscale-schedulebased"
	}
	{
		"sourceElement": "storageOut",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-autoscale-schedulebased"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-autoscale-schedulebased"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId(parameters('existingClusterStorageResourceGroup'), 'Microsoft.Storage/storageAccounts/', parameters('existingClusterStorageAccountName')), '2018-02-01').primaryEndpoints.blob,'https:',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-custom-ambari-db"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId(parameters('existingClusterStorageResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('existingClusterStorageAccountName')), '2018-02-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-custom-ambari-db"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[resourceId(parameters('existingVirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('existingVirtualNetworkName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-custom-ambari-db"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[resourceId(parameters('existingVirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('existingVirtualNetworkSubnetName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-custom-ambari-db"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[reference(resourceId(parameters('existingSQLServerResourceGroup'),'Microsoft.Sql/servers',parameters('existingSQLServerName')), '2018-06-01-preview').fullyQualifiedDomainName]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-custom-ambari-db"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[concat('jdbc:sqlserver://', reference(resourceId(parameters('existingSQLServerResourceGroup'), 'Microsoft.Sql/servers', parameters('existingSQLServerName')), '2018-06-01-preview').fullyQualifiedDomainName, ';database=',parameters('newMetastoreDBName'),';encrypt=true;trustServerCertificate=true;create=false;loginTimeout=300')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-custom-ambari-db"
	}
	{
		"sourceElement": "newMetastoreDBNameParam",
		"sourceToken": "[concat('metastoredb', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-custom-ambari-db"
	}
	{
		"sourceElement": "clusterNameParam",
		"sourceToken": "[concat('hdi-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-custom-ambari-db"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-custom-ambari-db"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-hbase-enhancedwrite"
	}
	{
		"sourceElement": "clusterNameParam",
		"sourceToken": "[concat('hbase-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-hbase-enhancedwrite"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2018-07-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-hbase-enhancedwrite"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2018-07-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-hbase-enhancedwrite"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-enhancedwrite"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-hbase-linux"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-hbase-linux"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-linux"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-hbase-linux"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-linux-vnet"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-hbase-linux-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2016-01-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-hbase-linux-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2016-01-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-hbase-linux-vnet"
	}
	{
		"sourceElement": "vnetOut",
		"sourceToken": "[reference(resourceId('Microsoft.Network/virtualNetworks',variables('vNet').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-linux-vnet"
	}
	{
		"sourceElement": "virtualMachineResource0",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-hdinsight-hbase-replication-geo"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-hdinsight-hbase-replication-geo"
	}
	{
		"sourceElement": "vnet2Out",
		"sourceToken": "[reference(resourceId('Microsoft.Network/virtualNetworks',variables('vNet2').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-replication-geo"
	}
	{
		"sourceElement": "vnet1Out",
		"sourceToken": "[reference(resourceId('Microsoft.Network/virtualNetworks',variables('vNet1').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-replication-geo"
	}
	{
		"sourceElement": "clusterNode1Var",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-hbase-replication-one-vnet"
	}
	{
		"sourceElement": "clusterNode2Var",
		"sourceToken": "[uniqueString(resourceGroup().id, deployment().name)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-hbase-replication-one-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('clusterNode1').defaultStorageAccount.name), '2016-01-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-hbase-replication-one-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('clusterNode1').defaultStorageAccount.name), '2016-01-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-hbase-replication-one-vnet"
	}
	{
		"sourceElement": "clusterResource0",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('clusterNode2').defaultStorageAccount.name), '2016-01-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-hbase-replication-one-vnet"
	}
	{
		"sourceElement": "clusterResource0",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('clusterNode2').defaultStorageAccount.name), '2016-01-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-hbase-replication-one-vnet"
	}
	{
		"sourceElement": "vnetOut",
		"sourceToken": "[reference(resourceId('Microsoft.Network/virtualNetworks',variables('vNet').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-replication-one-vnet"
	}
	{
		"sourceElement": "cluster1Out",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',variables('clusterNode1').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-replication-one-vnet"
	}
	{
		"sourceElement": "cluster2Out",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',variables('clusterNode2').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-replication-one-vnet"
	}
	{
		"sourceElement": "cluster1Out",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',variables('clusterNode1').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-replication-two-vnets-same-region"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('clusterNode1').defaultStorageAccount.name), '2016-01-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-hbase-replication-two-vnets-same-region"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('clusterNode1').defaultStorageAccount.name), '2016-01-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-hbase-replication-two-vnets-same-region"
	}
	{
		"sourceElement": "clusterNode1Var",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-hbase-replication-two-vnets-same-region"
	}
	{
		"sourceElement": "clusterNode2Var",
		"sourceToken": "[uniqueString(resourceGroup().id, deployment().name)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-hbase-replication-two-vnets-same-region"
	}
	{
		"sourceElement": "clusterResource0",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('clusterNode2').defaultStorageAccount.name), '2016-01-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-hbase-replication-two-vnets-same-region"
	}
	{
		"sourceElement": "clusterResource0",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('clusterNode2').defaultStorageAccount.name), '2016-01-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-hbase-replication-two-vnets-same-region"
	}
	{
		"sourceElement": "vnet2Out",
		"sourceToken": "[reference(resourceId('Microsoft.Network/virtualNetworks',variables('vNet2').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-replication-two-vnets-same-region"
	}
	{
		"sourceElement": "vnet1Out",
		"sourceToken": "[reference(resourceId('Microsoft.Network/virtualNetworks',variables('vNet1').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-replication-two-vnets-same-region"
	}
	{
		"sourceElement": "cluster2Out",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',variables('clusterNode2').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-hbase-replication-two-vnets-same-region"
	}
	{
		"sourceElement": "storageOut",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-interactive-hive"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-interactive-hive"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-interactive-hive"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(concat(reference(resourceId('Microsoft.Storage/storageAccounts/', variables('defaultStorageAccount').name), '2019-06-01').primaryEndpoints.blob),'https:',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-interactive-hive"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-interactive-hive"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-kafka"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').primaryEndpoints.blob),'https:',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-kafka"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-kafka"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-kafka"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('clStgAcnt')), '2019-06-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-kafka-with-edge-schema-registry"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('clStgAcnt')), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-kafka-with-edge-schema-registry"
	}
	{
		"sourceElement": "applicationResource",
		"sourceToken": "[concat('schemaregistry','-' ,uniquestring(variables('applicationName')))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-hdinsight-kafka-with-edge-schema-registry"
	}
	{
		"sourceElement": "clusterNameParam",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-kafka-with-edge-schema-registry"
	}
	{
		"sourceElement": "applicationResource",
		"sourceToken": "[concat('emptynode','-' ,uniquestring(variables('applicationName')))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-hdinsight-linux-add-edge-node"
	}
	{
		"sourceElement": "applicationOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters/applications/',parameters('clusterName'), variables('applicationName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-add-edge-node"
	}
	{
		"sourceElement": "storageOut",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-ssh-password"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-ssh-password"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name)).primaryEndpoints.blob),'https:',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-linux-ssh-password"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-linux-ssh-password"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-linux-ssh-password"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id),'storage')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').primaryEndpoints.blob),'https:',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId(parameters('existingClusterStorageResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('existingClusterStorageAccountName')), '2018-02-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey-metastore-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(concat(reference(resourceId(parameters('existingClusterStorageResourceGroup'), 'Microsoft.Storage/storageAccounts/', parameters('existingClusterStorageAccountName')), '2018-02-01').primaryEndpoints.blob),'https:',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey-metastore-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[concat('jdbc:sqlserver://', reference(resourceId(parameters('existingHiveMetastoreServerResourceGroupName'), 'Microsoft.Sql/servers',parameters('existingHiveMetastoreServerName')), '2018-06-01-preview').fullyQualifiedDomainName, ';database=',parameters('existingHiveMetastoreDatabaseName'),';encrypt=true;trustServerCertificate=true;create=false;loginTimeout=300')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey-metastore-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[reference(resourceId(parameters('existingHiveMetastoreServerResourceGroupName'),'Microsoft.Sql/servers',parameters('existingHiveMetastoreServerName')), '2018-06-01-preview').fullyQualifiedDomainName]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey-metastore-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[resourceId(parameters('existingVirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('existingVirtualNetworkName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey-metastore-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[concat(resourceId(parameters('existingVirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('existingVirtualNetworkName')), '/subnets/', parameters('existingVirtualNetworkSubnetName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey-metastore-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[resourceId(parameters('existingVirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('existingVirtualNetworkSubnetName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey-metastore-vnet"
	}
	{
		"sourceElement": "clusterNameParam",
		"sourceToken": "[concat('hdi-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey-metastore-vnet"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-ssh-publickey-metastore-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('clusterStorageAccountName')), '2016-01-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-linux-with-edge-node"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('clusterStorageAccountName')), '2016-01-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-linux-with-edge-node"
	}
	{
		"sourceElement": "applicationResource",
		"sourceToken": "[concat('emptynode','-' ,uniquestring(variables('applicationName')))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-hdinsight-linux-with-edge-node"
	}
	{
		"sourceElement": "storageOut",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('clusterStorageAccountName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-with-edge-node"
	}
	{
		"sourceElement": "applicationOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters/applications/',parameters('clusterName'), variables('applicationName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-with-edge-node"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-with-edge-node"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-with-existing-default-storage-account"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-linux-with-existing-linked-storage-account"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2016-01-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-linux-with-existing-linked-storage-account"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('defaultStorageAccount').name), '2016-01-01').primaryEndpoints.blob),'https:',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-linux-with-existing-linked-storage-account"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-with-existing-linked-storage-account"
	}
	{
		"sourceElement": "storageOut",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-with-existing-linked-storage-account"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-with-sql-database"
	}
	{
		"sourceElement": "sqlSvrFqdnOut",
		"sourceToken": "[reference(resourceId('Microsoft.Sql/servers/', variables('sqlDatabase').serverName)).fullyQualifiedDomainName]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-with-sql-database"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Sql/servers/databases/extensions' and version '2014-04-01'",
		"template": "101-hdinsight-linux-with-sql-database"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-linux-with-sql-database"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-linux-with-sql-database"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-linux-with-sql-database"
	}
	{
		"sourceElement": "storageOut",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-linux-with-sql-database"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId(parameters('existingClusterStorageResourceGroup'), 'Microsoft.Storage/storageAccounts/', parameters('existingClusterStorageAccountName')), '2019-06-01').primaryEndpoints.blob,'https:',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-minimum-tls"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId(parameters('existingClusterStorageResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('existingClusterStorageAccountName')), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-minimum-tls"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[resourceId(parameters('existingVirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('existingVirtualNetworkName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-minimum-tls"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[resourceId(parameters('existingVirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('existingVirtualNetworkSubnetName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-minimum-tls"
	}
	{
		"sourceElement": "clusterNameParam",
		"sourceToken": "[concat('hdi-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-minimum-tls"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-minimum-tls"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(variables('defaultStorageAccount').name).primaryEndpoints.blob, 'https:', ''), '/' ,'')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-rserver"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-rserver"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-rserver"
	}
	{
		"sourceElement": "storageOut",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-rserver"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-rserver"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-secure-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(concat(reference(resourceId('Microsoft.Storage/storageAccounts/', variables('defaultStorageAccount').name), '2019-06-01').primaryEndpoints.blob),'https:',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-secure-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-secure-vnet"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-secure-vnet"
	}
	{
		"sourceElement": "vnetOut",
		"sourceToken": "[reference(resourceId('Microsoft.Network/virtualNetworks',variables('vNet').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-secure-vnet"
	}
	{
		"sourceElement": "storageOut",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-secure-vnet"
	}
	{
		"sourceElement": "storageOut",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-spark-linux"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[concat('storage', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-spark-linux"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name)).primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-spark-linux"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-spark-linux"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters', parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-spark-linux"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').primaryEndpoints.blob,'https://',''),'/','')]",
		"severity": "Med",
		"description": "NYI: 'replace' not supported as yet",
		"template": "101-hdinsight-spark-linux-vnet"
	}
	{
		"sourceElement": "clusterResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccount').name), '2019-06-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-hdinsight-spark-linux-vnet"
	}
	{
		"sourceElement": "defaultStorageAccountVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-hdinsight-spark-linux-vnet"
	}
	{
		"sourceElement": "vnetOut",
		"sourceToken": "[reference(resourceId('Microsoft.Network/virtualNetworks',variables('vNet').name))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-spark-linux-vnet"
	}
	{
		"sourceElement": "clusterOut",
		"sourceToken": "[reference(resourceId('Microsoft.HDInsight/clusters',parameters('clusterName')))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hdinsight-spark-linux-vnet"
	}
	{
		"sourceElement": "virtualNetworkPeeringResource4",
		"sourceToken": "[equals(parameters('deployVpnGateway'), 'No')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "virtualNetworkPeeringResource1",
		"sourceToken": "[equals(parameters('deployVpnGateway'), 'Yes')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "virtualNetworkGatewayResource",
		"sourceToken": "[equals(parameters('deployVpnGateway'), 'Yes')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "jumphostVMIPAddressOut",
		"sourceToken": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('winJmphostPublicIpName'))).IpAddress]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "virtualNetworkPeeringResource3",
		"sourceToken": "[equals(parameters('deployVpnGateway'), 'Yes')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "virtualNetworkPeeringResource2",
		"sourceToken": "[equals(parameters('deployVpnGateway'), 'No')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "publicIPAddressResource",
		"sourceToken": "[toLower(parameters('winVmDnsPrefix'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "subnetResource2",
		"sourceToken": "[equals(parameters('deployVpnGateway'), 'Yes')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "virtualNetworkPeeringResource6",
		"sourceToken": "[equals(parameters('deployVpnGateway'), 'No')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "virtualNetworkPeeringResource5",
		"sourceToken": "[equals(parameters('deployVpnGateway'), 'Yes')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "winVmStorageNameVar",
		"sourceToken": "[concat('hubwinvm',uniquestring(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "virtualNetworkPeeringResource",
		"sourceToken": "[equals(parameters('deployVpnGateway'), 'Yes')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "virtualNetworkPeeringResource0",
		"sourceToken": "[equals(parameters('deployVpnGateway'), 'No')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-hub-and-spoke-sandbox"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[concat('https://sts.windows.net/', subscription().tenantId, '/')]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-identitygovernance-entitlementmanagement-extensibility-sample-logicapp"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[environment().authentication.audiences[0]]",
		"severity": "Med",
		"description": "NYI: 'environment' not supported as yet",
		"template": "101-identitygovernance-entitlementmanagement-extensibility-sample-logicapp"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-integrationpatterns-messagerouter-logicapp"
	}
	{
		"sourceElement": "serviceBusnamespacenameVar",
		"sourceToken": "[concat(parameters('MessageRouterServiceBusnamespacePrefix'), '-', uniquestring(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-integrationpatterns-messagerouter-servicebus"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for loadBalancerResource: missing variable: lbSkuVar",
		"template": "101-internal-loadbalancer-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for loadBalancerResource: missing variable: lbSkuVar",
		"template": "101-internal-loadbalancer-create-haports"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for iotHubResource: missing variable: IoTHubNameVar",
		"template": "101-iothub-auto-route-messages"
	}
	{
		"sourceElement": "provisioningServiceResource",
		"sourceToken": "[concat('HostName=', reference(resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName')), '2020-03-01').primaryKey)]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-iothub-device-provisioning"
	}
	{
		"sourceElement": "provisioningServiceResource",
		"sourceToken": "[reference(resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))).hostName]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-iothub-device-provisioning"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-iothub-with-consumergroup-create"
	}
	{
		"sourceElement": "jenkinsdnsParam",
		"sourceToken": "[concat('jenkins-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-jenkins-cluster-2-linux-1-win"
	}
	{
		"sourceElement": "scriptUrlMasterVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'),concat('scripts/install-jenkins.sh',parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-jenkins-cluster-2-linux-1-win"
	}
	{
		"sourceElement": "storageAccountResource",
		"sourceToken": "[toLower(parameters('storageName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-jenkins-cluster-2-linux-1-win"
	}
	{
		"sourceElement": "scriptUrlNode1Var",
		"sourceToken": "[uri(parameters('_artifactsLocation'),concat('scripts/install-slave.sh',parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-jenkins-cluster-2-linux-1-win"
	}
	{
		"sourceElement": "scriptUrlNode2Var",
		"sourceToken": "[uri(parameters('_artifactsLocation'),concat('win-slave.ps1',parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-jenkins-cluster-2-linux-1-win"
	}
	{
		"sourceElement": "storageNameParam",
		"sourceToken": "[concat('jenkins', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-jenkins-cluster-2-linux-1-win"
	}
	{
		"sourceElement": "node2",
		"sourceToken": "[resourceId('Microsoft.Storage/storageAccounts', toLower(parameters('storageName')))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-jenkins-cluster-2-linux-1-win"
	}
	{
		"sourceElement": "node2",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', toLower(parameters('storageName')))).primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-jenkins-cluster-2-linux-1-win"
	}
	{
		"sourceElement": "node1",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', toLower(parameters('storageName')))).primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-jenkins-cluster-2-linux-1-win"
	}
	{
		"sourceElement": "jenkinsMaster",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', toLower(parameters('storageName')))).primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-jenkins-cluster-2-linux-1-win"
	}
	{
		"sourceElement": "tenantIdParam",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-key-vault-create"
	}
	{
		"sourceElement": "tenantIdParam",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-keyvault-add-access-policy"
	}
	{
		"sourceElement": "accessPolicyResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.KeyVault/vaults/accessPolicies' and version '2019-09-01'",
		"template": "101-keyvault-add-access-policy"
	}
	{
		"sourceElement": "clustersKustoclusterNameParam",
		"sourceToken": "[concat('kusto', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-kusto-cluster-database"
	}
	{
		"sourceElement": "clusterNameParam",
		"sourceToken": "[concat('kusto', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-kusto-vnet"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for publicIPAddressResource3: missing variable: lbPublicIPAddressName-r2Var",
		"template": "101-load-balancer-cross-region"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for publicIPAddressResource0: missing variable: lbPublicIPAddressNameVar",
		"template": "101-load-balancer-ip-configured-backend-pool"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for publicIPAddressResource0: missing variable: lbPublicIPAddressNameVar",
		"template": "101-load-balancer-standard-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-loadbalancer-with-multivip"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-loadbalancer-with-nat-rule"
	}
	{
		"sourceElement": "functionAppNameParam",
		"sourceToken": "[concat('fn-app-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-logic-app-and-function-app"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
		"severity": "Med",
		"description": "NYI: 'environment' not supported as yet",
		"template": "101-logic-app-and-function-app"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[toLower(parameters('functionAppName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-logic-app-and-function-app"
	}
	{
		"sourceElement": "logicAppNameParam",
		"sourceToken": "[concat('logic-app-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-logic-app-and-function-app"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat('azfunctions', uniquestring(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-logic-app-and-function-app"
	}
	{
		"sourceElement": "sourcecontrolResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/sourcecontrols' and version '2019-08-01'",
		"template": "101-logic-app-and-function-app"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-logic-app-create"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azureblob')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-logic-app-ftp-to-blob"
	}
	{
		"sourceElement": "connectionResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-logic-app-ftp-to-blob"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'ftp')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-logic-app-ftp-to-blob"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-logic-app-ftp-to-blob"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[base64(parameters('ftpFolderPath'))]",
		"severity": "Med",
		"description": "NYI: 'base64' not supported as yet",
		"template": "101-logic-app-ftp-to-blob"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azureblob')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-logic-app-ftp-to-blob"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'ftp')]",
		"severity": "Med",
		"description": "NYI: 'subscriptionResourceId' not supported as yet",
		"template": "101-logic-app-ftp-to-blob"
	}
	{
		"sourceElement": "workflowResource",
		"sourceToken": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/sendgrid')]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-logic-app-sendgrid"
	}
	{
		"sourceElement": "triggerURIOut",
		"sourceToken": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows/', parameters('logicAppName')), '/triggers/manual'), '2016-06-01').value]",
		"severity": "Med",
		"description": "NYI: 'listCallbackURL' not supported as yet",
		"template": "101-logic-app-sendgrid"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/sendgrid')]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-logic-app-sendgrid"
	}
	{
		"sourceElement": "connectionResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/connections' and version '2018-07-01-preview'",
		"template": "101-logic-app-sendgrid"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-compute-attach-adla"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-compute-attach-aks"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-compute-attach-dsvm"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-compute-attach-hdi"
	}
	{
		"sourceElement": "computeResource",
		"sourceToken": "[if(and(not(empty(parameters('vnetResourceGroupName'))),not(empty(parameters('vnetName'))),not(empty(parameters('subnetName'))),not(empty(parameters('serviceCidr'))),not(empty(parameters('dnsServiceIP'))),not(empty(parameters('dockerBridgeCidr')))), variables('aksNetworkingConfiguration'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-compute-create-akscompute"
	}
	{
		"sourceElement": "computeResource",
		"sourceToken": "[if(equals(parameters('sslStatus'),'Disabled'), json('null'), variables('sslConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-compute-create-akscompute"
	}
	{
		"sourceElement": "aksNetworkingConfigurationVar",
		"sourceToken": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-machine-learning-compute-create-akscompute"
	}
	{
		"sourceElement": "computeResource",
		"sourceToken": "[if(and(not(empty(parameters('vnetResourceGroupName'))),not(empty(parameters('vnetName'))),not(empty(parameters('subnetName')))), variables('subnet'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-compute-create-amlcompute"
	}
	{
		"sourceElement": "subnetVar",
		"sourceToken": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-machine-learning-compute-create-amlcompute"
	}
	{
		"sourceElement": "tenantIdParam",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-machine-learning-compute-create-computeinstance"
	}
	{
		"sourceElement": "computeResource",
		"sourceToken": "[if(and(not(empty(parameters('vnetResourceGroupName'))),not(empty(parameters('vnetName'))),not(empty(parameters('subnetName')))), variables('subnet'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-compute-create-computeinstance"
	}
	{
		"sourceElement": "subnetVar",
		"sourceToken": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-machine-learning-compute-create-computeinstance"
	}
	{
		"sourceElement": "tenantIdVar",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "vaultResource",
		"sourceToken": "[equals(parameters('keyVaultNewOrExisting'), 'new')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "storageAccountNameParam",
		"sourceToken": "[concat('sa',uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "workspaceResource",
		"sourceToken": "[if(empty(parameters('containerRegistry')), json('null'), parameters('containerRegistry'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "workspaceResource",
		"sourceToken": "[if(empty(parameters('adbWorkspace')), json('null'), parameters('adbWorkspace'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "keyVaultVar",
		"sourceToken": "[resourceId(parameters('keyVaultResourceGroupName'), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "storageAccountVar",
		"sourceToken": "[resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "applicationInsightsNameParam",
		"sourceToken": "[concat('ai',uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "keyVaultNameParam",
		"sourceToken": "[concat('kv',uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "applicationInsightsVar",
		"sourceToken": "[resourceId(parameters('applicationInsightsResourceGroupName'), 'Microsoft.Insights/components', parameters('applicationInsightsName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "componentResource",
		"sourceToken": "[equals(parameters('applicationInsightsNewOrExisting'), 'new')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "componentResource",
		"sourceToken": "[if(or(equals(parameters('location'),'eastus2'), equals(parameters('location'),'westcentralus')),'southcentralus',parameters('location'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "storageAccountResource",
		"sourceToken": "[equals(parameters('storageAccountNewOrExisting'), 'new')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-machine-learning-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-dataset-create-file-from-relative-path"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-dataset-create-file-from-web-url"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-dataset-create-tabular-from-relative-path"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-dataset-create-tabular-from-sql-query"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-dataset-create-tabular-from-web-url"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[int(parameters('datastoreCount'))]",
		"severity": "Med",
		"description": "NYI: 'int' not supported as yet",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-04-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[concat(parameters('workspaceName'), '/', 'datastore', copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "keyVaultNameParam",
		"sourceToken": "[concat('kv',uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "containerNameParam",
		"sourceToken": "[concat('container',uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "applicationInsightsNameParam",
		"sourceToken": "[concat('ai',uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "storageAccountNameParam",
		"sourceToken": "[concat('sa',uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "tenantIdParam",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "componentResource",
		"sourceToken": "[if(equals(parameters('location'),'westcentralus'),'southcentralus', parameters('location'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "datasetResource",
		"sourceToken": "[int(parameters('datasetCount'))]",
		"severity": "Med",
		"description": "NYI: 'int' not supported as yet",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "datasetResource",
		"sourceToken": "[concat(parameters('workspaceName'), '/', 'dataset', copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Storage/storageAccounts/blobServices/containers' and version '2019-06-01'",
		"template": "101-machine-learning-dataset-create-workspace-multiple-dataset-datastore"
	}
	{
		"sourceElement": "tenantIdParam",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-machine-learning-datastore-create-adls"
	}
	{
		"sourceElement": "adlsStoreSubscriptionIdParam",
		"sourceToken": "[subscription().subscriptionId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-machine-learning-datastore-create-adls"
	}
	{
		"sourceElement": "tenantIdParam",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-machine-learning-datastore-create-adls-gen2"
	}
	{
		"sourceElement": "storageAccountSubscriptionIdParam",
		"sourceToken": "[subscription().subscriptionId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-machine-learning-datastore-create-blob"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'Account Key'), parameters('sasTokenOrAccountKey'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-datastore-create-blob"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'SAS token'), parameters('sasTokenOrAccountKey'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-datastore-create-blob"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-datastore-create-dbfs"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'Account Key'), parameters('sasTokenOrAccountKey'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-datastore-create-file"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'SAS token'), parameters('sasTokenOrAccountKey'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-datastore-create-file"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-datastore-create-mysql"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-machine-learning-datastore-create-psql"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'Service principal'), parameters('passwordOrClientSecret'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-datastore-create-sql"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'SQL Authentication'), parameters('passwordOrClientSecret'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-datastore-create-sql"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'Service principal'), parameters('tenantId'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-datastore-create-sql"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'Service principal'), parameters('userNameOrClientId'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-datastore-create-sql"
	}
	{
		"sourceElement": "datastoreResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'SQL Authentication'), parameters('userNameOrClientId'), json('null'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-machine-learning-datastore-create-sql"
	}
	{
		"sourceElement": "tenantIdParam",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-machine-learning-datastore-create-sql"
	}
	{
		"sourceElement": "synapseWorkspaceNameVar",
		"sourceToken": "[substring(parameters('synapseWorkspaceResourceId'), add(lastIndexOf(parameters('synapseWorkspaceResourceId'), '/'), 1))]",
		"severity": "Med",
		"description": "NYI: 'substring' not supported as yet",
		"template": "101-machine-learning-linkedservice-create"
	}
	{
		"sourceElement": "saiPrincipalIdOut",
		"sourceToken": "[reference(parameters('linkName'), '2020-04-01-preview', 'Full').identity.principalId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-machine-learning-linkedservice-create"
	}
	{
		"sourceElement": "computeResource",
		"sourceToken": "[concat(parameters('amlWorkspaceName'), '/', parameters('sparkPools')[copyIndex()].computeName)]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-machine-learning-linkedservice-create"
	}
	{
		"sourceElement": "computeResource",
		"sourceToken": "[length(parameters('sparkPools'))]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-machine-learning-linkedservice-create"
	}
	{
		"sourceElement": "computeResource",
		"sourceToken": "[resourceId(reference(parameters('synapseWorkspaceResourceId'), '2019-06-01-preview', 'Full').subscriptionId, reference(parameters('synapseWorkspaceResourceId'), '2019-06-01-preview', 'Full').resourceGroupName, 'Microsoft.Synapse/workspaces/bigDataPools', variables('synapseWorkspaceName'), parameters('sparkPools')[copyIndex()].poolName)]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-machine-learning-linkedservice-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for serviceResource: missing variable: modelsVar",
		"template": "101-machine-learning-service-create-aci"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for serviceResource: missing variable: modelsVar",
		"template": "101-machine-learning-service-create-aks"
	}
	{
		"sourceElement": "packageFileUriVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('artifacts/ManagedAppZip/pkg.zip', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-managed-application"
	}
	{
		"sourceElement": "managedResourceGroupIdVar",
		"sourceToken": "[concat(subscription().id,'/resourceGroups/', concat(parameters('applicationName'),'_managed'))]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-managed-application"
	}
	{
		"sourceElement": "managedResourceGroupIdVar",
		"sourceToken": "[concat(subscription().id,'/resourceGroups/', concat(parameters('applicationName'),'_managed'))]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-managed-application-with-linked-templates"
	}
	{
		"sourceElement": "packageFileUriVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('artifacts/ManagedAppZip/pkg.zip', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-managed-application-with-linked-templates"
	}
	{
		"sourceElement": "managedResourceGroupIdVar",
		"sourceToken": "[concat(subscription().id,'/resourceGroups/', concat(parameters('applicationName'),'_managed'))]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-managed-application-with-metrics-and-alerts"
	}
	{
		"sourceElement": "packageFileUriVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('artifacts/ManagedAppZip/pkg.zip', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-managed-application-with-metrics-and-alerts"
	}
	{
		"sourceElement": "tenantIdParam",
		"sourceToken": "[subscription().tenantId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-managed-hsm-create"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[concat(parameters('serverName'),'/',variables('firewallrules').batch.rules[copyIndex()].Name)]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-managed-mariadb-with-vnet"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[length(variables('firewallrules').batch.rules)]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-managed-mariadb-with-vnet"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[variables('firewallrules').batch.rules[copyIndex()].StartIpAddress]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-managed-mariadb-with-vnet"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[variables('firewallrules').batch.rules[copyIndex()].EndIpAddress]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-managed-mariadb-with-vnet"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[variables('firewallrules').batch.rules[copyIndex()].StartIpAddress]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-managed-mysql-with-vnet"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[variables('firewallrules').batch.rules[copyIndex()].EndIpAddress]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-managed-mysql-with-vnet"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[concat(parameters('serverName'),'/',variables('firewallrules').batch.rules[copyIndex()].Name)]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-managed-mysql-with-vnet"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[length(variables('firewallrules').batch.rules)]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-managed-mysql-with-vnet"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[concat(parameters('serverName'),'/',variables('firewallrules').batch.rules[copyIndex()].Name)]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-managed-postgresql-with-vnet"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[length(variables('firewallrules').batch.rules)]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-managed-postgresql-with-vnet"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[variables('firewallrules').batch.rules[copyIndex()].StartIpAddress]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-managed-postgresql-with-vnet"
	}
	{
		"sourceElement": "firewallRuleResource",
		"sourceToken": "[variables('firewallrules').batch.rules[copyIndex()].EndIpAddress]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-managed-postgresql-with-vnet"
	}
	{
		"sourceElement": "accountNameParam",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-maps-create"
	}
	{
		"sourceElement": "storageNameVar",
		"sourceToken": "[concat('storage', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-media-services-create"
	}
	{
		"sourceElement": "uniqueAppNameVar",
		"sourceToken": "[concat(parameters('appName'), '-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-mobile-app-create"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[listkeys(resourceId('Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules', variables('notificationHubNamespace'), variables('notificationHubName'), 'DefaultFullSharedAccessSignature'), '2017-04-01').primaryConnectionString]",
		"severity": "Med",
		"description": "NYI: 'listkeys' not supported as yet",
		"template": "101-mobile-app-create"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('Data Source=tcp:', reference(resourceId('Microsoft.Sql/servers', variables('databaseServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('databaseName'), ';User Id=', parameters('sqlServerAdminLogin'), '@', variables('databaseServerName'), ';Password=', parameters('sqlServerAdminPassword'), ';')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-mobile-app-create"
	}
	{
		"sourceElement": "configResource0",
		"sourceToken": "[listkeys(resourceId('Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules', variables('notificationHubNamespace'), variables('notificationHubName'), 'DefaultFullSharedAccessSignature'), '2017-04-01').primaryConnectionString]",
		"severity": "Med",
		"description": "NYI: 'listkeys' not supported as yet",
		"template": "101-mobile-app-create"
	}
	{
		"sourceElement": "configResource0",
		"sourceToken": "[concat('Data Source=tcp:', reference(resourceId('Microsoft.Sql/servers', variables('databaseServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('databaseName'), ';User Id=', parameters('sqlServerAdminLogin'), '@', variables('databaseServerName'), ';Password=', parameters('sqlServerAdminPassword'), ';')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-mobile-app-create"
	}
	{
		"sourceElement": "configResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2019-08-01'",
		"template": "101-mobile-app-create"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2019-08-01'",
		"template": "101-mobile-app-create"
	}
	{
		"sourceElement": "linkResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/providers/links' and version '2019-08-01'",
		"template": "101-mobile-app-create"
	}
	{
		"sourceElement": "sharedTemplateUrlVar",
		"sourceToken": "[uri(variables('templateBaseUrl'), concat('nested/shared-resources.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "deploymentResource",
		"sourceToken": "[concat('configSecondaryNode', copyIndex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "deploymentResource",
		"sourceToken": "[variables('networkSettings').statics[concat('configSecondaryIp', copyIndex(1))]]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "deploymentResource",
		"sourceToken": "[concat('configSecondary', copyIndex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "configTemplateUrlVar",
		"sourceToken": "[uri(variables('templateBaseUrl'), concat('nested/config-resources.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "replicaSecondaryNodeScriptVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/replica_secondary.sh', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "routerNodeScriptVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/router.sh', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "replicaPrimaryNodeScriptVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/replica_primary.sh', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "replicaTemplateUrlVar",
		"sourceToken": "[uri(variables('templateBaseUrl'), concat('nested/replica-resources.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "configSecondaryNodeScriptVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/config_secondary.sh', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "deploymentResource0",
		"sourceToken": "[concat('ReplicaSecondaryNode', copyIndex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "deploymentResource0",
		"sourceToken": "[concat('ReplicaSecondary', copyIndex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "configPrimaryNodeScriptVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/config_primary.sh', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "certificateLocationVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/MongoAuthCert.pem', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "routerTemplateUrlVar",
		"sourceToken": "[uri(variables('templateBaseUrl'), concat('nested/router-resources.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-mongodb-sharded-on-centos"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-monitoring-dynamic-metric-alert"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-monitoring-static-metric-alert"
	}
	{
		"sourceElement": "pingAlertRuleNameVar",
		"sourceToken": "[concat('PingAlert-', toLower(parameters('appName')), '-', subscription().subscriptionId)]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-monitoring-webtest-metric-alert"
	}
	{
		"sourceElement": "pingTestNameVar",
		"sourceToken": "[concat('PingTest-', toLower(parameters('appName')))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-monitoring-webtest-metric-alert"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat('labvm-',copyIndex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat('labvm',copyIndex(1),'OSDisk')]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[resourceId('Microsoft.Network/networkInterfaces', concat('labvm-nic-',copyIndex(1)))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('strname'))).primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "scriptUrlVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'),concat(parameters('scriptFilename'),parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[concat('labvm-nic-',copyIndex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[resourceId('Microsoft.Network/publicIPAddresses', concat('labvm-pip-',copyIndex(1)))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[concat('labvm-',copyIndex(1),'/installScript')]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "artifactsLocationParam",
		"sourceToken": "[deployment().properties.templateLink.uri]",
		"severity": "Med",
		"description": "NYI: 'deployment' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "strnameVar",
		"sourceToken": "[toLower(concat('labvmstg',uniqueString(resourceGroup().id)))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "publicIPAddressResource",
		"sourceToken": "[concat('labvm-pip-',copyIndex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "publicIPAddressResource",
		"sourceToken": "[toLower(concat(parameters('dns-prefix'),'-',copyIndex(1)))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-multiple-windows-vms-with-common-script"
	}
	{
		"sourceElement": "storageAccountResource",
		"sourceToken": "[resourceId(parameters('existingDataFactoryResourceGroup'), 'Microsoft.Resources/deployments', 'nestedTemplate')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-mutiple-vms-with-data-management-gateway"
	}
	{
		"sourceElement": "subnetIdVar",
		"sourceToken": "[resourceId(parameters('existingVnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('existingSubnetInYourVnet'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-mutiple-vms-with-data-management-gateway"
	}
	{
		"sourceElement": "gatewayIdVar",
		"sourceToken": "[resourceId(parameters('existingDataFactoryResourceGroup'), 'Microsoft.DataFactory/dataFactories/gateways', parameters('existingDataFactoryName'), parameters('GatewayName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-mutiple-vms-with-data-management-gateway"
	}
	{
		"sourceElement": "prefixVar",
		"sourceToken": "[split(parameters('GatewayName'), variables('delimiters'))[0]]",
		"severity": "Med",
		"description": "NYI: 'split' not supported as yet",
		"template": "101-mutiple-vms-with-data-management-gateway"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[take(concat(toLower(variables('prefix')), uniquestring(resourceGroup().id, parameters('GatewayName'))), 24)]",
		"severity": "Med",
		"description": "NYI: 'take' not supported as yet",
		"template": "101-mutiple-vms-with-data-management-gateway"
	}
	{
		"sourceElement": "deploymentResource",
		"sourceToken": "[concat('VMtemplate-', copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-mutiple-vms-with-data-management-gateway"
	}
	{
		"sourceElement": "deploymentResource",
		"sourceToken": "[take(concat('vm',copyIndex(),'-', variables('prefix')), 15)]",
		"severity": "Med",
		"description": "NYI: 'take' not supported as yet",
		"template": "101-mutiple-vms-with-data-management-gateway"
	}
	{
		"sourceElement": "deploymentResource",
		"sourceToken": "[resourceId(parameters('existingDataFactoryResourceGroup'), 'Microsoft.Resources/deployments', 'nestedTemplate')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-mutiple-vms-with-data-management-gateway"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-nat-gateway-1-vm"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for natGatewayResource: missing variable: publicipnameVar",
		"template": "101-nat-gateway-vnet"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-networkwatcher-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for deployFlowLogs: missing parameter: storageAccountResourceIdParam",
		"template": "101-networkwatcher-flowLogs-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-nic-publicip-dns-vnet"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-notification-hub"
	}
	{
		"sourceElement": "publicIpNameVar",
		"sourceToken": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
		"severity": "Med",
		"description": "NYI: 'substring' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[concat('hxnic', copyIndex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[resourceId('Microsoft.Network/publicIPAddresses', concat('hxpip', copyIndex(1)))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('hxpip', copyIndex(1)))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "publicIPAddressResource",
		"sourceToken": "[concat('hxpip', copyindex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyindex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "publicIPAddressResource",
		"sourceToken": "[concat('a', variables('publicIpName'), copyIndex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "linuxscripturiVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/configure-linux.sh', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "'[concat(concat('helixcore',copyIndex(1)),\"/\",concat('helixcore',copyIndex(1),'/CustomScript'))]'",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[resourceId('Microsoft.Compute/virtualMachines', concat('helixcore', copyIndex(1)))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "'[concat(concat('helixcore',copyIndex(1)),\"/\",concat('helixcore',copyIndex(1),'/CustomScript'))]'",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat('helixcore', copyIndex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat('helixcorevm', copyIndex(1))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[resourceId('Microsoft.Network/networkInterfaces',concat('hxnic', copyIndex(1)))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[resourceId('Microsoft.Compute/virtualMachines', concat('helixcore', copyIndex(1)))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-perforce-helix-core-server"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-point-to-site"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-power-bi-embedded"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-powerbi-workspace-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-private-dns-zone"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2019-08-01'",
		"template": "101-private-endpoint-webapp"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for loadBalancerResource: missing variable: loadBalancerNameVar",
		"template": "101-privatelink-service"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for roleAssignmentResource: missing parameter: roleDefinitionIdParam",
		"template": "101-rbac-builtinrole-resourcegroup"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to parse JSON: [ParseErrorUnexpectedEndOfString InvalidSymbol CommaExpected PropertyNameExpected InvalidSymbol ValueExpected InvalidSymbol PropertyNameExpected ParseErrorUnexpectedEndOfString ValueExpected]",
		"template": "101-rbac-builtinrole-virtualmachine"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for deploymentResource: missing parameter: vmNameParam",
		"template": "101-rds-deployment-full-ha"
	}
	{
		"sourceElement": "protectionContainerResource",
		"sourceToken": "[resourceId(parameters('existingResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('existingStorageAccountName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-recovery-services-backup-file-share"
	}
	{
		"sourceElement": "protectedItemResource",
		"sourceToken": "[resourceId(parameters('existingResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('existingStorageAccountName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-recovery-services-backup-file-share"
	}
	{
		"sourceElement": "protectedItemResource",
		"sourceToken": "[length(parameters('existingVirtualMachines'))]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-recovery-services-backup-vms"
	}
	{
		"sourceElement": "protectedItemResource",
		"sourceToken": "[concat(parameters('existingRecoveryServicesVault'), '/', variables('backupFabric'), '/', variables('v2VmContainer'), concat(parameters('existingVirtualMachinesResourceGroup'),';',parameters('existingVirtualMachines')[copyIndex()]), '/', variables('v2Vm'), concat(parameters('existingVirtualMachinesResourceGroup'),';',parameters('existingVirtualMachines')[copyIndex()]))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-recovery-services-backup-vms"
	}
	{
		"sourceElement": "protectedItemResource",
		"sourceToken": "[resourceId(subscription().subscriptionId,parameters('existingVirtualMachinesResourceGroup'),'Microsoft.Compute/virtualMachines',parameters('existingVirtualMachines')[copyIndex()])]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-recovery-services-backup-vms"
	}
	{
		"sourceElement": "omsWorkspaceNameVar",
		"sourceToken": "[concat(uniqueString(resourceGroup().id),'ws')]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-recovery-services-create-vault-enable-diagnostics"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniqueString(resourceGroup().id),'storage')]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-recovery-services-create-vault-enable-diagnostics"
	}
	{
		"sourceElement": "diagnosticSettingResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.RecoveryServices/vaults/providers/diagnosticSettings' and version '2017-05-01-preview'",
		"template": "101-recovery-services-create-vault-enable-diagnostics"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-recovery-services-create-vm-and-configure-backup"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-recovery-services-daily-backup-policy-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-recovery-services-vault-basic"
	}
	{
		"sourceElement": "backupstorageconfigResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.RecoveryServices/vaults/backupstorageconfig' and version '2020-02-02'",
		"template": "101-recovery-services-vault-create"
	}
	{
		"sourceElement": "protectionContainerResource",
		"sourceToken": "[resourceId(parameters('vmResourceGroup'),'Microsoft.Compute/virtualMachines', parameters('vmName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-recovery-services-vm-workload-backup"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-recovery-services-weekly-backup-policy-create"
	}
	{
		"sourceElement": "virtualNetworkResource",
		"sourceToken": "[equals(parameters('vnetNew-or-Existing'), 'New')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-route-server"
	}
	{
		"sourceElement": "jobResource",
		"sourceToken": "[listKeys(variables('queueSendOnlyKeyName'), '2017-04-01').primaryKey]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-scheduler-service-bus"
	}
	{
		"sourceElement": "jobResource",
		"sourceToken": "[listKeys(variables('queueSendOnlyKeyName'), '2017-04-01').keyName]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-scheduler-service-bus"
	}
	{
		"sourceElement": "jobCollectionResource",
		"sourceToken": "[listKeys(variables('queueSendOnlyKeyName'), '2017-04-01').primaryKey]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-scheduler-service-bus"
	}
	{
		"sourceElement": "jobCollectionResource",
		"sourceToken": "[listKeys(variables('queueSendOnlyKeyName'), '2017-04-01').keyName]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-scheduler-service-bus"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-security-group-create"
	}
	{
		"sourceElement": "subscriptionIdParam",
		"sourceToken": "[subscription().subscriptionId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-securitycenter-create-automation-for-alertnamecontains"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[length(parameters('alertSettings').alertSeverityMapping)]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-securitycenter-create-automation-for-alertnamecontains"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('alertSettings').alertSeverityMapping[copyIndex('ruleSets')].expectedValue]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-alertnamecontains"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('alertSettings').alertSeverityMapping[copyIndex('ruleSets')].operator]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-alertnamecontains"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('alertSettings').alertSeverityMapping[copyIndex('ruleSets')].jpath]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-alertnamecontains"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('alertSettings').alertSeverityMapping[copyIndex('ruleSets')].severity]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-alertnamecontains"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[format(variables('automationDescription'),'{0}', parameters('subscriptionId'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-securitycenter-create-automation-for-alertnamecontains"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[listCallbackURL(resourceId(parameters('subscriptionId'), parameters('logicAppResourceGroupName'), 'Microsoft.Logic/workflows/triggers', parameters('logicAppName'), 'manual'), '2019-05-01').value]",
		"severity": "Med",
		"description": "NYI: 'listCallbackURL' not supported as yet",
		"template": "101-securitycenter-create-automation-for-alertnamecontains"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[format(variables('scopeDescription'),'{0}', parameters('subscriptionId'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-securitycenter-create-automation-for-alertnamecontains"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[subscription().id]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-securitycenter-create-automation-for-alertnamecontains"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[listCallbackURL(resourceId(parameters('subscriptionId'), parameters('logicAppResourceGroupName'), 'Microsoft.Logic/workflows/triggers', parameters('logicAppName'), 'manual'), '2019-05-01').value]",
		"severity": "Med",
		"description": "NYI: 'listCallbackURL' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-alerts"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[format(variables('scopeDescription'),'{0}', parameters('subscriptionId'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-alerts"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[subscription().id]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-alerts"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[length(parameters('alertSettings').alertSeverityMapping)]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-alerts"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('alertSettings').alertSeverityMapping[copyIndex('ruleSets')].jpath]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-alerts"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('alertSettings').alertSeverityMapping[copyIndex('ruleSets')].expectedValue]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-alerts"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('alertSettings').alertSeverityMapping[copyIndex('ruleSets')].operator]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-alerts"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('alertSettings').alertSeverityMapping[copyIndex('ruleSets')].severity]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-alerts"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[format(variables('automationDescription'),'{0}', parameters('subscriptionId'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-alerts"
	}
	{
		"sourceElement": "subscriptionIdParam",
		"sourceToken": "[subscription().subscriptionId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-alerts"
	}
	{
		"sourceElement": "subscriptionIdParam",
		"sourceToken": "[subscription().subscriptionId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[format(variables('scopeDescription'),'{0}', parameters('subscriptionId'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[subscription().id]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[length(parameters('assessmentSettings').assessmentSeverityMapping)]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('assessmentSettings').assessmentSeverityMapping[copyIndex('ruleSets')].jpath]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('assessmentSettings').assessmentSeverityMapping[copyIndex('ruleSets')].assessmentName]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('assessmentSettings').assessmentSeverityMapping[copyIndex('ruleSets')].operator]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('assessmentSettings').assessmentSeverityMapping[copyIndex('ruleSets')].state]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[format(variables('automationDescription'),'{0}', parameters('subscriptionId'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[listCallbackURL(resourceId(parameters('subscriptionId'), parameters('logicAppResourceGroupName'), 'Microsoft.Logic/workflows/triggers', parameters('logicAppName'), 'manual'), '2019-05-01').value]",
		"severity": "Med",
		"description": "NYI: 'listCallbackURL' not supported as yet",
		"template": "101-securitycenter-create-automation-for-all-recommendations"
	}
	{
		"sourceElement": "subscriptionIdParam",
		"sourceToken": "[subscription().subscriptionId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-securitycenter-create-automation-for-specific-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[format(variables('automationDescription'),'{0}', parameters('subscriptionId'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-securitycenter-create-automation-for-specific-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[listCallbackURL(resourceId(parameters('subscriptionId'), parameters('logicAppResourceGroupName'), 'Microsoft.Logic/workflows/triggers', parameters('logicAppName'), 'manual'), '2019-05-01').value]",
		"severity": "Med",
		"description": "NYI: 'listCallbackURL' not supported as yet",
		"template": "101-securitycenter-create-automation-for-specific-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[format(variables('scopeDescription'),'{0}', parameters('subscriptionId'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-securitycenter-create-automation-for-specific-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[subscription().id]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-securitycenter-create-automation-for-specific-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[length(parameters('assessmentSettings').assessmentSeverityMapping)]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-securitycenter-create-automation-for-specific-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('assessmentSettings').assessmentSeverityMapping[copyIndex('ruleSets')].jpath]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-specific-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('assessmentSettings').assessmentSeverityMapping[copyIndex('ruleSets')].assessmentName]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-specific-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('assessmentSettings').assessmentSeverityMapping[copyIndex('ruleSets')].operator]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-specific-recommendations"
	}
	{
		"sourceElement": "automationResource",
		"sourceToken": "[parameters('assessmentSettings').assessmentSeverityMapping[copyIndex('ruleSets')].state]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-securitycenter-create-automation-for-specific-recommendations"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-servicebus-create-namespace"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-servicebus-create-namespace-geo-recoveryconfiguration"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-servicebus-namespace"
	}
	{
		"sourceElement": "defaultSharedAccessPolicyPrimaryKeyOut",
		"sourceToken": "[listkeys(variables('defaultAuthRuleResourceId'), variables('ehVersion')).primaryKey]",
		"severity": "Med",
		"description": "NYI: 'listkeys' not supported as yet",
		"template": "101-servicebus-pn-ar"
	}
	{
		"sourceElement": "namespaceCustomConnectionStringOut",
		"sourceToken": "[listkeys(variables('customAuthRuleResourceId'), variables('ehVersion')).primaryConnectionString]",
		"severity": "Med",
		"description": "NYI: 'listkeys' not supported as yet",
		"template": "101-servicebus-pn-ar"
	}
	{
		"sourceElement": "namespaceDefaultConnectionStringOut",
		"sourceToken": "[listkeys(variables('defaultAuthRuleResourceId'), variables('ehVersion')).primaryConnectionString]",
		"severity": "Med",
		"description": "NYI: 'listkeys' not supported as yet",
		"template": "101-servicebus-pn-ar"
	}
	{
		"sourceElement": "customSharedAccessPolicyPrimaryKeyOut",
		"sourceToken": "[listkeys(variables('customAuthRuleResourceId'), variables('ehVersion')).primaryKey]",
		"severity": "Med",
		"description": "NYI: 'listkeys' not supported as yet",
		"template": "101-servicebus-pn-ar"
	}
	{
		"sourceElement": "sharedAccessPolicyPrimaryKeyOut",
		"sourceToken": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryKey]",
		"severity": "Med",
		"description": "NYI: 'listkeys' not supported as yet",
		"template": "101-servicebus-queue"
	}
	{
		"sourceElement": "namespaceConnectionStringOut",
		"sourceToken": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryConnectionString]",
		"severity": "Med",
		"description": "NYI: 'listkeys' not supported as yet",
		"template": "101-servicebus-queue"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-servicebus-topic"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-servicebus-topic-subscription"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-servicebus-topic-subscription-sqlfilter"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-sig-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-sig-image-definition-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-sig-image-version-create"
	}
	{
		"sourceElement": "nameParam",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-signalr"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-site-to-site-vpn-create"
	}
	{
		"sourceElement": "serverNameParam",
		"sourceToken": "[uniqueString('sql', resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-sql-database"
	}
	{
		"sourceElement": "databaseResource",
		"sourceToken": "[length(parameters('databasesNames'))]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-sql-elastic-pool-create"
	}
	{
		"sourceElement": "databaseResource",
		"sourceToken": "[concat(parameters('serverName'), '/', parameters('databasesNames')[copyIndex()])]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-sql-elastic-pool-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-sql-managed-instance-azure-environment"
	}
	{
		"sourceElement": "sqlVirtualMachineResource",
		"sourceToken": "[trim(variables('existingVMListArray')[copyIndex()])]",
		"severity": "Med",
		"description": "NYI: 'trim' not supported as yet",
		"template": "101-sql-vm-ag-setup"
	}
	{
		"sourceElement": "sqlVirtualMachineResource",
		"sourceToken": "[length(variables('existingVMListArray'))]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-sql-vm-ag-setup"
	}
	{
		"sourceElement": "sqlVirtualMachineResource",
		"sourceToken": "[resourceId(parameters('existingVmResourceGroup'), 'Microsoft.Compute/virtualMachines', trim(variables('existingVMListArray')[copyIndex()]))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-sql-vm-ag-setup"
	}
	{
		"sourceElement": "existingVMListArrayVar",
		"sourceToken": "[split(parameters('existingVmList'),',')]",
		"severity": "Med",
		"description": "NYI: 'split' not supported as yet",
		"template": "101-sql-vm-ag-setup"
	}
	{
		"sourceElement": "sqlVirtualMachineGroupResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('cloudWitnessName')), '2018-07-01').keys[0].value]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-sql-vm-ag-setup"
	}
	{
		"sourceElement": "sqlVirtualMachineGroupResource",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('cloudWitnessName')), '2018-07-01').primaryEndpoints['blob']]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-sql-vm-ag-setup"
	}
	{
		"sourceElement": "cloudWitnessNameParam",
		"sourceToken": "[concat('clwitness', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-sql-vm-ag-setup"
	}
	{
		"sourceElement": "subnetResourceIdVar",
		"sourceToken": "[concat(resourceid(parameters('existingVnetResourcegroup'),'Microsoft.Network/virtualNetworks', parameters('existingVnet')), '/subnets/', parameters('existingSubnet'))]",
		"severity": "Med",
		"description": "NYI: 'resourceid' not supported as yet",
		"template": "101-sql-vm-aglistener-setup"
	}
	{
		"sourceElement": "sqlVmResourceIdListVar",
		"sourceToken": "[union(variables('VM0'), variables('VM1'), variables('VM2'), variables('VM3'), variables('VM4'), variables('VM5'))]",
		"severity": "Med",
		"description": "NYI: 'union' not supported as yet",
		"template": "101-sql-vm-aglistener-setup"
	}
	{
		"sourceElement": "vM2Var",
		"sourceToken": "[if(less(2, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[2]))), json('[]'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-sql-vm-aglistener-setup"
	}
	{
		"sourceElement": "vmArrayVar",
		"sourceToken": "[split(parameters('existingVmList'),',')]",
		"severity": "Med",
		"description": "NYI: 'split' not supported as yet",
		"template": "101-sql-vm-aglistener-setup"
	}
	{
		"sourceElement": "existingVnetResourcegroupParam",
		"sourceToken": "[resourcegroup().name]",
		"severity": "Med",
		"description": "NYI: 'resourcegroup' not supported as yet",
		"template": "101-sql-vm-aglistener-setup"
	}
	{
		"sourceElement": "vM5Var",
		"sourceToken": "[if(less(5, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[5]))), json('[]'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-sql-vm-aglistener-setup"
	}
	{
		"sourceElement": "vM1Var",
		"sourceToken": "[if(less(1, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[1]))), json('[]'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-sql-vm-aglistener-setup"
	}
	{
		"sourceElement": "vM3Var",
		"sourceToken": "[if(less(3, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[3]))), json('[]'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-sql-vm-aglistener-setup"
	}
	{
		"sourceElement": "vM4Var",
		"sourceToken": "[if(less(4, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[4]))), json('[]'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-sql-vm-aglistener-setup"
	}
	{
		"sourceElement": "vM0Var",
		"sourceToken": "[if(less(0, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[0]))), json('[]'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-sql-vm-aglistener-setup"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for sqlVirtualMachineResource: missing variable: dataDisksLUNsVar",
		"template": "101-sql-vm-new-storage"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for sqlVirtualMachineResource: missing variable: dataDisksLUNsVar",
		"template": "101-sql-vm-new-storage-ultrassd"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-sql-with-failover-group"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-sqlmi-new-vnet"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat('store', uniquestring(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-storage-account-create"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Storage/storageAccounts/blobServices/containers' and version '2019-06-01'",
		"template": "101-storage-blob-container"
	}
	{
		"sourceElement": "storageAccountNameParam",
		"sourceToken": "[concat('storage', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-storage-file-share"
	}
	{
		"sourceElement": "shareResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Storage/storageAccounts/fileServices/shares' and version '2019-06-01'",
		"template": "101-storage-file-share"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "[concat(parameters('storageAccountName'), '/default/', parameters('containerPrefix'), copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-storage-multi-blob-container"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Storage/storageAccounts/blobServices/containers' and version '2019-06-01'",
		"template": "101-storage-multi-blob-container"
	}
	{
		"sourceElement": "shareResource",
		"sourceToken": "[concat(parameters('storageAccountName'), '/default/', parameters('sharePrefix'), copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-storage-multi-file-share"
	}
	{
		"sourceElement": "shareResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Storage/storageAccounts/fileServices/shares' and version '2019-06-01'",
		"template": "101-storage-multi-file-share"
	}
	{
		"sourceElement": "storageAccountNameParam",
		"sourceToken": "[concat('storage', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-storage-multi-file-share"
	}
	{
		"sourceElement": "streamingJobResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.StreamAnalytics/StreamingJobs' and version '2019-06-01'",
		"template": "101-streamanalytics-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-subnet-add-vnet-existing"
	}
	{
		"sourceElement": "metadataSyncResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Synapse/workspaces/sqlPools/metadataSync' and version '2019-06-01-preview'",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "bigDataPoolResource",
		"sourceToken": "[equals(parameters('sparkDeployment'),'true')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "workspaceNameVar",
		"sourceToken": "[toLower(concat(variables('synapseName'),'ws1'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "mSIRBACOnResourceGroup0",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/logicapproleassignments.json', parameters('_artifactsLocationSASToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "managedIdentitySqlControlSettingResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Synapse/workspaces/managedIdentitySqlControlSettings' and version '2019-06-01-preview'",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "dlsFsNameVar",
		"sourceToken": "[toLower(concat(variables('dlsName'),'fs1'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "synapseNameVar",
		"sourceToken": "[toLower(concat(parameters('companyTla'),parameters('deploymentType')))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "mSIRBACOnResourceGroup1",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/logicapproleassignments.json', parameters('_artifactsLocationSASToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "workspaceResource",
		"sourceToken": "[equals(parameters('allowAllConnections'),'true')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "dlsNameVar",
		"sourceToken": "[toLower(concat('dls',parameters('companyTla'),parameters('deploymentType')))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "firewallruleResource",
		"sourceToken": "[equals(parameters('allowAllConnections'),'true')]",
		"severity": "Med",
		"description": "NYI: 'equals' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "roleAssignmentResource",
		"sourceToken": "[guid(uniqueString(variables('dlsName')))]",
		"severity": "Med",
		"description": "NYI: 'guid' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "roleAssignmentResource",
		"sourceToken": "[reference(resourceId('Microsoft.Synapse/workspaces', variables('workspaceName')), '2019-06-01-preview', 'Full').identity.principalId]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "sqlPoolNameVar",
		"sourceToken": "[toLower(concat(variables('workspaceName'),'p1'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "logicAppPauseDeployment",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/pausetemplate.json', parameters('_artifactsLocationSASToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "artifactsLocationParam",
		"sourceToken": "[deployment().properties.templatelink.uri]",
		"severity": "Med",
		"description": "NYI: 'deployment' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "sparkPoolNameVar",
		"sourceToken": "[toLower('synasp1')]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "logicAppResumeDeployment",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/resumetemplate.json', parameters('_artifactsLocationSASToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "containerResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Storage/storageAccounts/blobServices/containers' and version '2019-06-01'",
		"template": "101-synapse-poc"
	}
	{
		"sourceElement": "templateSpecSubscriptionIdParam",
		"sourceToken": "[subscription().subscriptionId]",
		"severity": "Med",
		"description": "NYI: 'subscription' not supported as yet",
		"template": "101-templatespec-create"
	}
	{
		"sourceElement": "deploymentResource",
		"sourceToken": "[format('{0}-{1}-deployment', parameters('templateSpecName'), parameters('templateSpecVersion'))]",
		"severity": "Med",
		"description": "NYI: 'format' not supported as yet",
		"template": "101-templatespec-create"
	}
	{
		"sourceElement": "deploymentResource",
		"sourceToken": "[resourceId(parameters('templateSpecSubscriptionId'), parameters('templateSpecResourceGroupName'), 'Microsoft.Resources/templateSpecs/versions', parameters('templateSpecName'), parameters('templateSpecVersion'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-templatespec-create"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-traffic-manager-external-endpoint"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-ubuntu-mate-desktop-vscode"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('infra.sh', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-ubuntu-mate-desktop-vscode"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-virtual-wan"
	}
	{
		"sourceElement": "projectResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'microsoft.visualstudio/account/project' and version '2014-04-01-preview'",
		"template": "101-visual-studio-team-services-project-create"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-vm-automatic-static-ip"
	}
	{
		"sourceElement": "updateipTemplateUriVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nested/update-nic.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-vm-automatic-static-ip"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[base64(parameters('customData'))]",
		"severity": "Med",
		"description": "NYI: 'base64' not supported as yet",
		"template": "101-vm-customdata"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-vm-customdata"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), variables('apiVersion')).primaryEndpoints.blob)]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vm-customdata"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'sacustmdata')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-customdata"
	}
	{
		"sourceElement": "vmNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'myVMFromGalleryImageVersion')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-from-sig"
	}
	{
		"sourceElement": "nicNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'myVMNic')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-from-sig"
	}
	{
		"sourceElement": "publicIPAddressNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'myPublicIP')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-from-sig"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat('diags', uniquestring(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-from-user-image"
	}
	{
		"sourceElement": "dnsLabelPrefixParam",
		"sourceToken": "[concat('vm', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-vm-from-user-image"
	}
	{
		"sourceElement": "networkSecurityGroupResource",
		"sourceToken": "[if(equals(parameters('osType'), 'Windows'), 3389, 22)]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-vm-from-user-image"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-vm-from-user-image"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vm-from-user-image"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat('storage', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-vm-linux-Jupyterhub"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/install.sh', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-vm-linux-Jupyterhub"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-vm-linux-Jupyterhub"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('scripts/install.sh', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-vm-linux-Jupyterhub"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id),'storage')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-linux-serial-output"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-vm-linux-serial-output"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), variables('apiVersion')).primaryEndpoints.blob)]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vm-linux-serial-output"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2019-06-01').primaryEndpoints.blob)]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vm-multiple-data-disk"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'saddiskvm')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-multiple-data-disk"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-vm-multiple-ipconfig"
	}
	{
		"sourceElement": "dnsLabelPrefixParam",
		"sourceToken": "[concat('vm-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-vm-secure-password"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'sawinvm')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-secure-password"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'safreebsdvm')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-simple-freebsd"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-vm-simple-freebsd"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2019-06-01').primaryEndpoints.blob)]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vm-simple-freebsd"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for sshCommandOut: missing variable: publicIPAddressNameVar",
		"template": "101-vm-simple-linux"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-vm-simple-linux-with-accelerated-networking"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2019-06-01').primaryEndpoints.blob)]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vm-simple-linux-with-accelerated-networking"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat('stglinuxvm', uniquestring(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-simple-linux-with-accelerated-networking"
	}
	{
		"sourceElement": "virtualNetworkNameVar",
		"sourceToken": "[concat(uniquestring(parameters('vmName')), 'vnet')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-simple-rhel"
	}
	{
		"sourceElement": "nicNameVar",
		"sourceToken": "[concat(uniquestring(parameters('vmName')), 'nic')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-simple-rhel"
	}
	{
		"sourceElement": "dataDisk1NameVar",
		"sourceToken": "[concat(uniquestring(parameters('vmName')), 'datadisk1')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-simple-rhel"
	}
	{
		"sourceElement": "publicIPAddressNameVar",
		"sourceToken": "[concat(uniquestring(parameters('vmName')), 'publicip')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-simple-rhel"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-vm-simple-rhel"
	}
	{
		"sourceElement": "dataDisk2NameVar",
		"sourceToken": "[concat(uniquestring(parameters('vmName')), 'datadisk2')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-simple-rhel"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(parameters('vmName')), 'storage')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-simple-rhel-unmanaged"
	}
	{
		"sourceElement": "virtualNetworkNameVar",
		"sourceToken": "[concat(uniquestring(parameters('vmName')), 'vnet')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-simple-rhel-unmanaged"
	}
	{
		"sourceElement": "nicNameVar",
		"sourceToken": "[concat(uniquestring(parameters('vmName')), 'nic')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-simple-rhel-unmanaged"
	}
	{
		"sourceElement": "publicIPAddressNameVar",
		"sourceToken": "[concat(uniquestring(parameters('vmName')), 'publicip')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-simple-rhel-unmanaged"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-vm-simple-rhel-unmanaged"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2019-06-01').primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vm-simple-rhel-unmanaged"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for publicIPAddressResource: missing parameter: publicIPNameParam",
		"template": "101-vm-simple-windows"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for hostnameOut: missing variable: publicIPAddressNameVar",
		"template": "101-vm-simple-windows-visualstudio2019"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for sshCommandOut: missing variable: publicIPAddressNameVar",
		"template": "101-vm-simple-zones"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('sqlAutobackupStorageAccountName')), '2015-06-15').key1]",
		"severity": "Med",
		"description": "NYI: 'listKeys' not supported as yet",
		"template": "101-vm-sql-existing-autobackup-update"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('sqlAutobackupStorageAccountName')), '2015-06-15').primaryEndpoints['blob']]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vm-sql-existing-autobackup-update"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-vm-sql-existing-autopatching-update"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-vm-sql-existing-keyvault-update"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-vm-sshkey"
	}
	{
		"sourceElement": "dnsLabelPrefixParam",
		"sourceToken": "[concat('vm-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-vm-tags"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'satagsvm')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-tags"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for publicIpAddressResource: missing parameter: publicIPNameParam",
		"template": "101-vm-trustedlaunch-linux"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for publicIPAddressResource: missing parameter: publicIPNameParam",
		"template": "101-vm-trustedlaunch-windows"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for virtualMachineResource: missing parameter: Cpu-GpuParam",
		"template": "101-vm-ubuntu-DSVM-GPU-or-CPU"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat(reference(resourceId(parameters('bootDiagnosticsStorageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('bootDiagnosticsStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob)]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vm-user-image-data-disks"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[copyIndex('dataDisks')]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vm-windows-copy-datadisks"
	}
	{
		"sourceElement": "dnsLabelPrefixParam",
		"sourceToken": "[concat('ddvm-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-vm-windows-copy-datadisks"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat('powershell.exe -ExecutionPolicy Unrestricted -File gatewayInstall.ps1 ', listAuthKeys(resourceId('Microsoft.DataFactory/dataFactories/gateways', parameters('existingDataFactoryName'), parameters('GatewayName')), '2015-10-01').key1, ' ', reference(variables('nsgTemplateName')).outputs.hostname.Value, ' ', parameters('enableToSetDataStorePasswordsFromInternet'))]",
		"severity": "Med",
		"description": "NYI: 'listAuthKeys' not supported as yet",
		"template": "101-vm-with-data-management-gateway"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vm-with-data-management-gateway"
	}
	{
		"sourceElement": "prefixVar",
		"sourceToken": "[split(parameters('gatewayName'), variables('delimiters'))[0]]",
		"severity": "Med",
		"description": "NYI: 'split' not supported as yet",
		"template": "101-vm-with-data-management-gateway"
	}
	{
		"sourceElement": "virtualMachineNameVar",
		"sourceToken": "[take(concat('vm-', variables('prefix')), 15)]",
		"severity": "Med",
		"description": "NYI: 'take' not supported as yet",
		"template": "101-vm-with-data-management-gateway"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[resourceId(parameters('existingVnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('existingSubnetInYourVnet'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vm-with-data-management-gateway"
	}
	{
		"sourceElement": "gatewayResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.DataFactory/dataFactories/gateways' and version '2015-10-01'",
		"template": "101-vm-with-data-management-gateway"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[take(concat(toLower(variables('prefix')), uniquestring(resourceGroup().id, variables('virtualMachineName'))), 24)]",
		"severity": "Med",
		"description": "NYI: 'take' not supported as yet",
		"template": "101-vm-with-data-management-gateway"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[concat('powershell.exe -ExecutionPolicy Unrestricted -File gatewayInstall.ps1 ', listAuthKeys(resourceId('Microsoft.DataFactory/dataFactories/gateways', parameters('existingDataFactoryName'), parameters('GatewayName')), '2015-10-01').key1, ' ', reference(variables('nsgTemplateName')).outputs.hostname.Value, ' ', parameters('enableToSetDataStorePasswordsFromInternet'))]",
		"severity": "Med",
		"description": "NYI: 'listAuthKeys' not supported as yet",
		"template": "101-vm-with-data-management-gateway"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[concat(uniquestring(resourceGroup().id), 'sardpvm')]",
		"severity": "Med",
		"description": "NYI: 'uniquestring' not supported as yet",
		"template": "101-vm-with-rdp-port"
	}
	{
		"sourceElement": "oSDiskNameVar",
		"sourceToken": "[concat(toLower(parameters('virtualMachineName')),'OSDisk')]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-vm-with-standardssd-disk"
	}
	{
		"sourceElement": "publicIpAddressNameVar",
		"sourceToken": "[concat(toLower(parameters('virtualMachineName')),'-ip')]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-vm-with-standardssd-disk"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat(parameters('virtualMachineName'),'DataDisk',copyIndex('dataDisks'))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vm-with-standardssd-disk"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[copyIndex('dataDisks')]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vm-with-standardssd-disk"
	}
	{
		"sourceElement": "subnetNameVar",
		"sourceToken": "[concat(toLower(parameters('virtualMachineName')),'-subnet')]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-vm-with-standardssd-disk"
	}
	{
		"sourceElement": "networkInterfaceNameVar",
		"sourceToken": "[toLower(parameters('virtualMachineName'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-vm-with-standardssd-disk"
	}
	{
		"sourceElement": "virtualNetworkNameVar",
		"sourceToken": "[concat(toLower(parameters('virtualMachineName')),'-vnet')]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-vm-with-standardssd-disk"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for virtualMachineScaleSetResource: missing variable: publicIpPrefixNameVar",
		"template": "101-vmms-with-public-ip-prefix"
	}
	{
		"sourceElement": "deploymentResource0",
		"sourceToken": "[concat('IRInstalltemplate-', copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "deploymentResource0",
		"sourceToken": "[take(concat('vm',copyIndex(),'-', variables('prefix')), 15)]",
		"severity": "Med",
		"description": "NYI: 'take' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "deploymentResource0",
		"sourceToken": "[reference(resourceId(parameters('existingDataFactoryResourceGroup'), 'Microsoft.Resources/deployments', 'nestedTemplate')).outputs.irId.value]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "storageAccountNameVar",
		"sourceToken": "[take(concat(toLower(variables('prefix')), uniquestring(resourceGroup().id, parameters('IntegrationRuntimeName'))), 24)]",
		"severity": "Med",
		"description": "NYI: 'take' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "artifactsLocationParam",
		"sourceToken": "[deployment().properties.templateLink.uri]",
		"severity": "Med",
		"description": "NYI: 'deployment' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "storageAccountResource",
		"sourceToken": "[resourceId(parameters('existingDataFactoryResourceGroup'), 'Microsoft.Resources/deployments', 'nestedTemplate')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "subnetIdVar",
		"sourceToken": "[resourceId(parameters('existingVnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('existingSubnetInYourVnet'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "scriptURLVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('gatewayInstall.ps1', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "prefixVar",
		"sourceToken": "[split(parameters('IntegrationRuntimeName'), variables('delimiters'))[0]]",
		"severity": "Med",
		"description": "NYI: 'split' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "deploymentResource",
		"sourceToken": "[concat('VMtemplate-', copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "deploymentResource",
		"sourceToken": "[take(concat('vm',copyIndex(),'-', variables('prefix')), 15)]",
		"severity": "Med",
		"description": "NYI: 'take' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "deploymentResource",
		"sourceToken": "[resourceId(parameters('existingDataFactoryResourceGroup'), 'Microsoft.Resources/deployments', 'nestedTemplate')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "iRtemplateLinkVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nested/IRtemplate.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "irInstallTemplateLinkVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nested/IRInstall.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "vmTemplateLinkVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'), concat('nested/VMtemplate.json', parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-vms-with-selfhost-integration-runtime"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-vnet-two-subnets"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for connectionResource: missing parameter: iKEEncryptionParam",
		"template": "101-vpn-custom-ipsec-policy"
	}
	{
		"sourceElement": "storagenameParam",
		"sourceToken": "[concat('labvmstrg', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-vs2019-git-docker-windows2019"
	}
	{
		"sourceElement": "vsLab",
		"sourceToken": "[reference(resourceId('Microsoft.Storage/storageAccounts/', parameters('storagename'))).primaryEndpoints.blob]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vs2019-git-docker-windows2019"
	}
	{
		"sourceElement": "labvmdnsOut",
		"sourceToken": "[reference(resourceId('Microsoft.Network/publicIPAddresses','vslab-PublicIP')).dnsSettings.fqdn]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-vs2019-git-docker-windows2019"
	}
	{
		"sourceElement": "scriptUrlVar",
		"sourceToken": "[uri(parameters('_artifactsLocation'),concat('installscript.ps1',parameters('_artifactsLocationSasToken')))]",
		"severity": "Med",
		"description": "NYI: 'uri' not supported as yet",
		"template": "101-vs2019-git-docker-windows2019"
	}
	{
		"sourceElement": "storageAccountResource",
		"sourceToken": "[toLower(parameters('storagename'))]",
		"severity": "Med",
		"description": "NYI: 'toLower' not supported as yet",
		"template": "101-vs2019-git-docker-windows2019"
	}
	{
		"sourceElement": "vmdnsParam",
		"sourceToken": "[concat('labvm-',uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-vs2019-git-docker-windows2019"
	}
	{
		"sourceElement": "artifactsLocationParam",
		"sourceToken": "[deployment().properties.templateLink.uri]",
		"severity": "Med",
		"description": "NYI: 'deployment' not supported as yet",
		"template": "101-vs2019-git-docker-windows2019"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[concat('Microsoft.Network/publicIPAddresses/', concat(variables('publicIPAddressName'),'i', copyIndex()))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[concat(variables('nicName'), 'i', copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "networkInterfaceResource",
		"sourceToken": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'),'i', copyIndex()))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "publicIPAddressResource",
		"sourceToken": "[concat(variables('publicIPAddressName'),'i', copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[concat('Microsoft.Compute/virtualMachines/',concat(variables('vmName'), 'i', copyIndex()))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[empty(replace(parameters('agentGroupName'), ' ',''))]",
		"severity": "Med",
		"description": "NYI: 'empty' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "extensionResource",
		"sourceToken": "[concat(variables('vmName'), 'i', copyIndex(), '/DefaultStartupScript')]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "extensionResource0",
		"sourceToken": "[concat(variables('vmName'), 'i', copyIndex(), '/StartupScript')]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "extensionResource0",
		"sourceToken": "[concat('Microsoft.Compute/virtualMachines/',concat(variables('vmName'), 'i', copyIndex()))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "extensionResource0",
		"sourceToken": "[greater(length(replace(parameters('agentGroupName'), ' ','')),0)]",
		"severity": "Med",
		"description": "NYI: 'greater' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "uniqueStringValueVar",
		"sourceToken": "[substring(variables('sequenceVersion'), 3, 7)]",
		"severity": "Med",
		"description": "NYI: 'substring' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "sequenceVersionVar",
		"sourceToken": "[uniqueString(resourceGroup().id)]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat(variables('vmName'), 'i',copyIndex())]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[concat('Microsoft.Network/networkInterfaces/', concat(variables('nicName'), 'i', copyIndex()))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "virtualMachineResource",
		"sourceToken": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), 'i', copyIndex()))]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-vsts-cloudloadtest-rig"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "",
		"description": "",
		"template": "101-webapp-basic-linux"
	}
	{
		"sourceElement": "gitRepoUrlVar",
		"sourceToken": "[if(empty(parameters('repoUrl')), variables('gitRepoReference')[parameters('language')], parameters('repoUrl'))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-webapp-basic-windows"
	}
	{
		"sourceElement": "webAppNameParam",
		"sourceToken": "[concat('webApp-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-webapp-basic-windows"
	}
	{
		"sourceElement": "sourcecontrolResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/sourcecontrols' and version '2020-06-01'",
		"template": "101-webapp-basic-windows"
	}
	{
		"sourceElement": "serverfarmResource",
		"sourceToken": "[if(lessOrEquals(length(parameters('environments')), variables('standardPlanMaxAdditionalSlots')), 'S1', 'P1')]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-webapp-custom-deployment-slots"
	}
	{
		"sourceElement": "slotResource",
		"sourceToken": "[concat(variables('webAppPortalName'), '/', parameters('environments')[copyIndex()])]",
		"severity": "Med",
		"description": "NYI: 'copyIndex' not supported as yet",
		"template": "101-webapp-custom-deployment-slots"
	}
	{
		"sourceElement": "slotResource",
		"sourceToken": "[length(parameters('environments'))]",
		"severity": "Med",
		"description": "NYI: 'length' not supported as yet",
		"template": "101-webapp-custom-deployment-slots"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "[concat('postgresql://', variables('AirflowUserName'),':',parameters('administratorLoginPassword'),'@',reference(resourceId('Microsoft.DBforPostgreSQL/servers',variables('serverName'))).fullyQualifiedDomainName,':5432/',variables('databaseName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-linux-airflow-postgresql"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2020-06-01'",
		"template": "101-webapp-linux-airflow-postgresql"
	}
	{
		"sourceElement": "siteNameParam",
		"sourceToken": "[concat('airflow-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-webapp-linux-airflow-postgresql"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('postgresql://', variables('AirflowUserName'),':',parameters('administratorLoginPassword'),'@',reference(resourceId('Microsoft.DBforPostgreSQL/servers',variables('serverName'))).fullyQualifiedDomainName,':5432/',variables('databaseName'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-linux-airflow-postgresql"
	}
	{
		"sourceElement": "webAppNameParam",
		"sourceToken": "[concat('Django-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-webapp-linux-django"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[reference(resourceId('microsoft.insights/components/', variables('appInsights'))).InstrumentationKey]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-linux-django"
	}
	{
		"sourceElement": "webAppNameParam",
		"sourceToken": "[concat('flask-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-webapp-linux-flask"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for serverResource: missing parameter: databaseSkuFamilyParam",
		"template": "101-webapp-linux-managed-mysql"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('Database=', variables('databaseName'), ';Server=', reference(resourceId('Microsoft.DBforPostgreSQL/servers',variables('serverName'))).fullyQualifiedDomainName, ';User Id=',parameters('administratorLogin'),'@',variables('serverName') ,';Password=',parameters('administratorLoginPassword'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-linux-managed-postgresql"
	}
	{
		"sourceElement": "webAppNameParam",
		"sourceToken": "[concat('Node-', uniqueString(resourceGroup().name, utcNow('F')))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-webapp-linux-node"
	}
	{
		"sourceElement": "serverResource",
		"sourceToken": "[concat('v12.0,user,vcore',if(contains(variables('sqlDatabaseServerlessTiers'),parameters('sqlDatabaseSkuName')),',serverless',''))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-webapp-linux-sonarqube-azuresql"
	}
	{
		"sourceElement": "serverResource",
		"sourceToken": "[mul(mul(mul(parameters('sqlDatabaseSkuSizeGB'),1024),1024),1024)]",
		"severity": "Med",
		"description": "NYI: 'mul' not supported as yet",
		"template": "101-webapp-linux-sonarqube-azuresql"
	}
	{
		"sourceElement": "databaseResource",
		"sourceToken": "[mul(mul(mul(parameters('sqlDatabaseSkuSizeGB'),1024),1024),1024)]",
		"severity": "Med",
		"description": "NYI: 'mul' not supported as yet",
		"template": "101-webapp-linux-sonarqube-azuresql"
	}
	{
		"sourceElement": "databaseResource",
		"sourceToken": "[concat('v12.0,user,vcore',if(contains(variables('sqlDatabaseServerlessTiers'),parameters('sqlDatabaseSkuName')),',serverless',''))]",
		"severity": "Med",
		"description": "NYI: 'if' not supported as yet",
		"template": "101-webapp-linux-sonarqube-azuresql"
	}
	{
		"sourceElement": "siteNameParam",
		"sourceToken": "[concat('sonarqube-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-webapp-linux-sonarqube-azuresql"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('jdbc:sqlserver://', reference(resourceId('Microsoft.Sql/servers',variables('sqlServerName'))).fullyQualifiedDomainName, ';databaseName=', variables('databaseName'), ';encrypt=true;trustServerCertificate=false;hostNameInCertificate=', replace(reference(resourceId('Microsoft.Sql/servers', variables('sqlServerName'))).fullyQualifiedDomainName, concat(variables('sqlServerName'), '.'), '*.'), ';loginTimeout=30;')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-linux-sonarqube-azuresql"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "[concat('jdbc:sqlserver://', reference(resourceId('Microsoft.Sql/servers',variables('sqlServerName'))).fullyQualifiedDomainName, ';databaseName=', variables('databaseName'), ';encrypt=true;trustServerCertificate=false;hostNameInCertificate=', replace(reference(resourceId('Microsoft.Sql/servers', variables('sqlServerName'))).fullyQualifiedDomainName, concat(variables('sqlServerName'), '.'), '*.'), ';loginTimeout=30;')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-linux-sonarqube-azuresql"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2020-06-01'",
		"template": "101-webapp-linux-sonarqube-azuresql"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "[concat('jdbc:mysql://',  reference(resourceId('Microsoft.DBforMySQL/servers',variables('serverName'))).fullyQualifiedDomainName , ':3306/',variables('databaseName'),'?verifyServerCertificate=true\u0026useSSL=true\u0026requireSSL=false\u0026useUnicode=true\u0026characterEncoding=utf8')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-linux-sonarqube-mysql"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2019-08-01'",
		"template": "101-webapp-linux-sonarqube-mysql"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('jdbc:mysql://',  reference(resourceId('Microsoft.DBforMySQL/servers',variables('serverName'))).fullyQualifiedDomainName , ':3306/',variables('databaseName'),'?verifyServerCertificate=true\u0026useSSL=true\u0026requireSSL=false\u0026useUnicode=true\u0026characterEncoding=utf8')]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-linux-sonarqube-mysql"
	}
	{
		"sourceElement": "",
		"sourceToken": "",
		"severity": "Fatal",
		"description": "failed to evaluate template expression for serverResource: missing parameter: databaseSkucapacityParam",
		"template": "101-webapp-linux-sonarqube-postgresql"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('Database=', variables('databaseName'), ';Data Source=', reference(resourceId('Microsoft.DBforMySQL/servers',variables('serverName'))).fullyQualifiedDomainName, ';User Id=', parameters('administratorLogin'),'@', variables('serverName'),';Password=', parameters('administratorLoginPassword'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-managed-mysql"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "[concat('Database=', variables('databaseName'), ';Data Source=', reference(resourceId('Microsoft.DBforMySQL/servers',variables('serverName'))).fullyQualifiedDomainName, ';User Id=', parameters('administratorLogin'),'@', variables('serverName'),';Password=', parameters('administratorLoginPassword'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-managed-mysql"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2020-06-01'",
		"template": "101-webapp-managed-mysql"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[concat('Database=', variables('databaseName'), ';Server=', reference(resourceId('Microsoft.DBforPostgreSQL/servers',variables('serverName'))).fullyQualifiedDomainName, ';User Id=', parameters('administratorLogin'),'@', variables('serverName'),';Password=', parameters('administratorLoginPassword'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-managed-postgresql"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "[concat('Database=', variables('databaseName'), ';Server=', reference(resourceId('Microsoft.DBforPostgreSQL/servers',variables('serverName'))).fullyQualifiedDomainName, ';User Id=', parameters('administratorLogin'),'@', variables('serverName'),';Password=', parameters('administratorLoginPassword'))]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-managed-postgresql"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2018-11-01'",
		"template": "101-webapp-managed-postgresql"
	}
	{
		"sourceElement": "configResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2019-08-01'",
		"template": "101-webapp-privateendpoint-vnet-injection"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2018-11-01'",
		"template": "101-webapp-privateendpoint-vnet-injection"
	}
	{
		"sourceElement": "site2NameParam",
		"sourceToken": "[concat('webapp2', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-webapp-privateendpoint-vnet-injection"
	}
	{
		"sourceElement": "site1NameParam",
		"sourceToken": "[concat('webapp1', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-webapp-privateendpoint-vnet-injection"
	}
	{
		"sourceElement": "configResource1",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2019-08-01'",
		"template": "101-webapp-privateendpoint-vnet-injection"
	}
	{
		"sourceElement": "networkConfigResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/networkConfig' and version '2019-08-01'",
		"template": "101-webapp-privateendpoint-vnet-injection"
	}
	{
		"sourceElement": "webAppNameParam",
		"sourceToken": "[concat('ASPNET-', uniqueString(resourceGroup().id))]",
		"severity": "Med",
		"description": "NYI: 'uniqueString' not supported as yet",
		"template": "101-webapp-windows-ASPNET"
	}
	{
		"sourceElement": "siteResource",
		"sourceToken": "[reference(resourceId('microsoft.insights/components/', variables('appInsight')), '2018-05-01-preview').InstrumentationKey]",
		"severity": "Med",
		"description": "NYI: 'resourceId' not supported as yet",
		"template": "101-webapp-windows-ASPNET"
	}
	{
		"sourceElement": "configResource0",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2015-08-01'",
		"template": "101-webapp-with-golang"
	}
	{
		"sourceElement": "configResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.Web/sites/config' and version '2015-08-01'",
		"template": "101-webapp-with-golang"
	}
	{
		"sourceElement": "viewResource",
		"sourceToken": "",
		"severity": "High",
		"description": "no metadata found for resource type 'Microsoft.OperationalInsights/workspaces/views' and version '2015-11-01-preview'",
		"template": "101-webappazure-oms-monitoring"
	}